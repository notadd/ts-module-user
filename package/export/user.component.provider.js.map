{"version":3,"sources":["export/user.component.provider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6CAAuE;AAEvE,0DAAsD;AACtD,sDAA4C;AAC5C,sDAA4C;AAC5C,sDAA4C;AAK5C;IAEI,YACqB,cAAgC,EAChC,cAAgC,EAChC,cAAgC,EAChC,WAAwB;QAHxB,mBAAc,GAAd,cAAc,CAAkB;QAChC,mBAAc,GAAd,cAAc,CAAkB;QAChC,mBAAc,GAAd,cAAc,CAAkB;QAChC,gBAAW,GAAX,WAAW,CAAa;IACzC,CAAC;IAGC,WAAW,CAAC,EAAU;;YACxB,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAC5C,CAAC;KAAA;IAEK,WAAW,CAAC,EAAU;;YACxB,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC;QAChG,CAAC;KAAA;IAEK,aAAa,CAAC,QAAgB;;YAChC,OAAO,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,eAAe,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;QAC3J,CAAC;KAAA;IAEK,OAAO,CAAC,IAAyE;;YACnF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtD,OAAO,CAAC,CAAC,KAAK,CAAC;QACnB,CAAC;KAAA;IAEK,UAAU,CAAC,cAAsB,EAAE,QAAgB,EAAE,QAAgB;;YACvE,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,cAAc,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC1E,CAAC;KAAA;IAEK,UAAU,CAAC,EAAU,EAAE,QAAgB,EAAE,QAAgB;;YAC3D,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC9D,CAAC;KAAA;IAEK,QAAQ,CAAC,EAAU,EAAE,OAAsB;;YAC7C,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QACjD,CAAC;KAAA;IAEK,cAAc,CAAC,EAAU,EAAE,aAA4B;;YACzD,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;QACjD,CAAC;KAAA;CACJ;AA1CD,sCA0CC;AAEY,QAAA,kBAAkB,GAAG,oBAAoB,CAAC;AAE1C,QAAA,qBAAqB,GAAG;IACjC,OAAO,EAAE,0BAAkB;IAC3B,UAAU,EAAE,CAAC,cAAgC,EAAE,cAAgC,EAAE,cAAgC,EAAE,WAAwB,EAAE,EAAE;QAC3I,OAAO,IAAI,aAAa,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;IAC1F,CAAC;IACD,MAAM,EAAE,CAAC,4BAAkB,CAAC,kBAAI,CAAC,EAAE,4BAAkB,CAAC,kBAAI,CAAC,EAAE,4BAAkB,CAAC,kBAAI,CAAC,EAAE,0BAAW,CAAC;CAEtG,CAAC","file":"user.component.provider.js","sourcesContent":["import { InjectRepository, getRepositoryToken } from \"@nestjs/typeorm\";\nimport { Permission } from \"../model/permission.entity\";\nimport { UserService } from \"../service/user.service\";\nimport { Func } from \"../model/func.entity\";\nimport { Role } from \"../model/role.entity\";\nimport { User } from \"../model/user.entity\";\nimport { Repository } from \"typeorm\";\nimport * as crypto from \"crypto\";\n\n/* 用户模块向其他模块提供的导出组件类 */\nexport class UserComponent {\n\n    constructor(\n        private readonly funcRepository: Repository<Func>,\n        private readonly roleRepository: Repository<Role>,\n        private readonly userRepository: Repository<User>,\n        private readonly userService: UserService\n    ) { }\n\n    /* 获取用户拥有权限 */\n    async permissions(id: number): Promise<Array<Permission>> {\n        return this.userService.permissions(id);\n    }\n\n    async getUserById(id: number): Promise<User | undefined> {\n        return this.userRepository.findOne(id, { select: [\"id\", \"userName\", \"status\", \"recycle\"] });\n    }\n\n    async getUserByName(userName: string): Promise<User | undefined> {\n        return this.userRepository.createQueryBuilder(\"user\").select([\"user.id\", \"user.userName\", \"user.status\", \"user.recycle\"]).where({ userName }).getOne();\n    }\n\n    async isExist(user: { id: number, userName: string, status: boolean, recycle: boolean }): Promise<boolean> {\n        const exist = await this.userRepository.findOne(user);\n        return !!exist;\n    }\n\n    async createUser(organizationId: number, userName: string, password: string): Promise<void> {\n        await this.userService.createUser(organizationId, userName, password);\n    }\n\n    async updateUser(id: number, userName: string, password: string): Promise<void> {\n        await this.userService.updateUser(id, userName, password);\n    }\n\n    async setRoles(id: number, roleIds: Array<number>): Promise<void> {\n        await this.userService.setRoles(id, roleIds);\n    }\n\n    async setPermissions(id: number, permissionIds: Array<number>): Promise<void> {\n        await this.setPermissions(id, permissionIds);\n    }\n}\n\nexport const UserComponentToken = \"UserComponentToken\";\n\nexport const UserComponentProvider = {\n    provide: UserComponentToken,\n    useFactory: (funcRepository: Repository<Func>, roleRepository: Repository<Role>, userRepository: Repository<User>, userService: UserService) => {\n        return new UserComponent(funcRepository, roleRepository, userRepository, userService);\n    },\n    inject: [getRepositoryToken(Func), getRepositoryToken(Role), getRepositoryToken(User), UserService]\n\n};\n"]}