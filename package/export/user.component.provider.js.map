{"version":3,"sources":["export/user.component.provider.ts"],"names":[],"mappings":"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","file":"user.component.provider.js","sourcesContent":["import { Permission } from \"../model/permission.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Func } from \"../model/func.entity\";\nimport { Role } from \"../model/role.entity\";\nimport { User } from \"../model/user.entity\";\nimport { Repository } from \"typeorm\";\nimport * as crypto from \"crypto\";\n\n\n/* 用户模块向其他模块提供的导出组件类 */\nexport class UserComponent {\n\n    constructor(\n        private readonly funcRepository: Repository<Func>,\n        private readonly roleRepository: Repository<Role>,\n        private readonly userRepository: Repository<User>\n    ) {\n    }\n\n    async permissions(id: number): Promise<Array<Permission>> {\n        const user: User | undefined = await this.userRepository.findOneById(id, { relations: [\"roles\", \"adds\", \"reduces\"] });\n        if (!user) {\n            return [];\n        }\n        // 声明最后的结果\n        const result: Array<Permission> = [];\n        // 声明临时结果，未去重\n        let temp: Array<Permission> = [];\n        // 用来去重的集合\n        const ids: Set<number> = new Set();\n        // 遍历获取所有角色拥有的权限\n        for (let i = 0; i < user.roles.length; i++) {\n            const role: Role | undefined = await this.roleRepository.findOneById(user.roles[i].id, { relations: [\"funcs\"] });\n            if (role && role.funcs && role.funcs.length > 0) {\n                for (let j = 0; j < role.funcs.length; j++) {\n                    const func: Func | undefined = await this.funcRepository.findOneById(role.funcs[i].id, { relations: [\"permissions\"] });\n                    if (func) {\n                        temp = temp.concat(func.permissions);\n                    }\n                }\n            }\n\n        }\n        // 生成去重的集合\n        temp.forEach(per => {\n            if (!ids.has(per.id)) {\n                ids.add(per.id);\n                result.push(per);\n            }\n        });\n        // 遍历添加权限\n        user.adds.forEach(per => {\n            if (!ids.has(per.id)) {\n                ids.add(per.id);\n                result.push(per);\n            }\n        });\n        // 遍历减去权限\n        user.reduces.forEach(per => {\n            if (ids.has(per.id)) {\n                ids.delete(per.id);\n                const index = result.findIndex(p => {\n                    return p.id === per.id;\n                });\n                result.splice(index, 1);\n            }\n        });\n        result.sort((a, b) => {\n            return a.id - b.id;\n        });\n        return result;\n    }\n\n    /* 用户登录方法，登录用户要求用户名与密码匹配，用户密码为加盐生成\n       回收站用户不能登录\n       封禁用户可以登录但是没有权限\n    */\n    async login(userName: string, password: string): Promise<boolean | User | undefined> {\n        const user: User | undefined = await this.userRepository.findOne({ userName });\n        if (!user) {\n            return false;\n        }\n        /* 回收站用户不可登录 */\n        if (user.recycle) {\n            return false;\n        }\n        const passwordWithSalt = crypto.createHash(\"sha256\").update(password + user.salt).digest(\"hex\");\n        if (passwordWithSalt !== user.password) {\n            return false;\n        }\n        return this.userRepository.findOneById(user.id, { select: [\"id\", \"userName\", \"status\", \"recycle\"] });\n    }\n\n    async getUserById(id: number): Promise<User | undefined> {\n        return this.userRepository.findOneById(id, { select: [\"id\", \"userName\", \"status\", \"recycle\"] });\n    }\n\n    async getUserByName(userName: string): Promise<User | undefined> {\n        return this.userRepository.createQueryBuilder(\"user\").select([\"user.id\", \"user.userName\", \"user.status\", \"user.recycle\"]).where({ userName }).getOne();\n    }\n\n    async isExist(user: { id: number, userName: string, status: boolean, recycle: boolean }): Promise<boolean> {\n        const exist = await this.userRepository.findOne(user);\n        return !!exist;\n    }\n\n}\n\nexport const UserComponentProvider = {\n    provide: \"UserComponentToken\",\n    useFactory: (funcRepository: Repository<Func>, roleRepository: Repository<Role>, userRepository: Repository<User>) => {\n        return new UserComponent(funcRepository, roleRepository, userRepository);\n    },\n    inject: [\"FuncRepository\", \"RoleRepository\", \"UserRepository\"]\n\n};\n"]}