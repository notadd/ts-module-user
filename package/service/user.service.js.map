{"version":3,"sources":["service/user.service.ts"],"names":[],"mappings":"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","file":"user.service.js","sourcesContent":["import { ArrayInfo, FileInfo, TextInfo, UnionUserInfo } from \"../interface/user/union.user.info\";\nimport { UserInfoManager, ModuleUserInfo } from \"../interface/user.info.manager\";\nimport { Component, HttpException, Inject } from \"@nestjs/common\";\nimport { StoreComponent } from \"../interface/store.component\";\nimport { Repository, Connection, QueryRunner } from \"typeorm\";\nimport { Organization } from \"../model/organization.entity\";\nimport { Permission } from \"../model/permission.entity\";\nimport { InfoGroup } from \"../model/info.group.entity\";\nimport { InfoItem } from \"../model/info.item.entity\";\nimport { UserInfo } from \"../model/user.info.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Func } from \"../model/func.entity\";\nimport { Role } from \"../model/role.entity\";\nimport { User } from \"../model/user.entity\";\nimport { IncomingMessage } from \"http\";\nimport { createHash } from \"crypto\";\n\n\n@Component()\nexport class UserService {\n\n    /* 其他模块的用户信息管理器组件数组 */\n    userInfoManagers: Array<UserInfoManager> = new Array();\n\n    constructor(\n        @Inject(Connection) private readonly connection: Connection,\n        @InjectRepository(Func) private readonly funcRepository: Repository<Func>,\n        @InjectRepository(Role) private readonly roleRepository: Repository<Role>,\n        @InjectRepository(User) private readonly userRepository: Repository<User>,\n        @Inject(\"StoreComponentToken\") private readonly storeComponent: StoreComponent,\n        @InjectRepository(UserInfo) private readonly userInfoRepository: Repository<UserInfo>,\n        @InjectRepository(InfoGroup) private readonly infoGroupRepository: Repository<InfoGroup>,\n        @InjectRepository(Permission) private readonly permissionRepository: Repository<Permission>,\n        @InjectRepository(Organization) private readonly organizationRepository: Repository<Organization>,\n    ) {\n    }\n\n    async getUserById(id: number): Promise<{ id: number, userName: string, status: boolean, recycle: boolean } | undefined> {\n        return this.userRepository.findOneById(id, { select: [\"id\", \"userName\", \"status\", \"recycle\"] });\n    }\n\n    async getUserByName(userName: string): Promise<User | undefined> {\n        return this.userRepository.createQueryBuilder(\"user\").where({ userName }).getOne();\n    }\n\n    async getAll(): Promise<Array<User>> {\n        return this.userRepository.find({ recycle: false });\n    }\n\n    async getFreedomUsers(): Promise<Array<User>> {\n        const users: Array<User> = await this.userRepository.find({ relations: [\"organizations\"] });\n        return users.filter(user => {\n            return (\n                user.organizations === null || user.organizations === undefined || user.organizations.length === 0\n            ) && !user.recycle;\n        });\n    }\n\n    async getRecycleUsers(): Promise<Array<User>> {\n        return this.userRepository.find({ recycle: true });\n    }\n\n    /*返回用户信息时，需要提取其InfoItem对象以获取信息名称 */\n    async userInfos(id: number): Promise<Array<{ name: string, value: string }>> {\n        const user: User | undefined = await this.userRepository.findOneById(id, { relations: [\"userInfos\"] });\n        if (!user) {\n            throw new HttpException(\"指定用户不存在\", 406);\n        }\n        const userInfos: Array<UserInfo> = await this.userInfoRepository\n            .createQueryBuilder(\"userInfo\")\n            .leftJoinAndSelect(\"userInfo.infoItem\", \"infoItem\", \"userInfo.infoItemId=infoItem.id\")\n            .where(\"userInfo.userId = :id\", { id })\n            .getMany();\n\n        return userInfos.map(userInfo => {\n            return { name: userInfo.infoItem.name, value: userInfo.value };\n        });\n    }\n\n    async roles(id: number): Promise<Array<Role>> {\n        const user: User | undefined = await this.userRepository.findOneById(id, { relations: [\"roles\"] });\n        if (!user) {\n            throw new HttpException(\"指定用户不存在\", 406);\n        }\n        return user.roles;\n    }\n\n    async permissions(id: number): Promise<Array<Permission>> {\n        const user: User | undefined = await this.userRepository.findOneById(\n            id,\n            { relations: [\"roles\", \"adds\", \"reduces\"] },\n        );\n        if (!user) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n        }\n        // 声明最后的结果\n        const result: Array<Permission> = [];\n        // 声明临时结果，未去重\n        let temp: Array<Permission> = [];\n        // 用来去重的集合\n        const ids: Set<number> = new Set();\n        // 遍历获取所有角色拥有的权限\n        for (let i = 0; i < user.roles.length; i++) {\n            const role: Role | undefined = await this.roleRepository.findOneById(\n                user.roles[i].id,\n                { relations: [\"funcs\"] },\n            );\n            if (role && role.funcs && role.funcs.length > 0) {\n                for (let j = 0; j < role.funcs.length; j++) {\n                    const func: Func | undefined = await this.funcRepository.findOneById(\n                        role.funcs[i].id,\n                        { relations: [\"permissions\"] },\n                    );\n                    if (func) {\n                        temp = temp.concat(func.permissions);\n                    }\n                }\n            }\n        }\n        // 生成去重的集合\n        temp.forEach(per => {\n            if (!ids.has(per.id)) {\n                ids.add(per.id);\n                result.push(per);\n            }\n        });\n        // 遍历添加权限\n        user.adds.forEach(per => {\n            if (!ids.has(per.id)) {\n                ids.add(per.id);\n                result.push(per);\n            }\n        });\n        // 遍历减去权限\n        user.reduces.forEach(per => {\n            if (ids.has(per.id)) {\n                ids.delete(per.id);\n                const index = result.findIndex(p => {\n                    return p.id === per.id;\n                });\n                result.splice(index, 1);\n            }\n        });\n        result.sort((a, b) => {\n            return a.id - b.id;\n        });\n\n        return result;\n    }\n\n    async createUser(organizationId: number, userName: string, password: string): Promise<void> {\n        const organizations: Array<Organization> = [];\n        if (organizationId) {\n            const organization = await this.organizationRepository.findOneById(organizationId);\n            if (!organization) {\n                throw new HttpException(\"指定id=\" + organizationId + \"组织不存在\", 402);\n            }\n            organizations.push(organization);\n        }\n        const exist: User | undefined = await this.userRepository.findOne({ userName });\n        if (exist) {\n            throw new HttpException(\"指定userName=\" + userName + \"用户已存在\", 406);\n        }\n        try {\n            const salt = createHash(\"sha256\").update(new Date().toString()).digest(\"hex\").slice(0, 10);\n            const passwordWithSalt = createHash(\"sha256\").update(password + salt).digest(\"hex\");\n            const user: User = this.userRepository.create({\n                userName,\n                password: passwordWithSalt,\n                salt,\n                status: true,\n                recycle: false,\n                organizations,\n            });\n            await this.userRepository.save(user);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async createUserWithUserInfo(req: IncomingMessage, organizationId: number, userName: string, password: string, groups: Array<{ groupId: number, infos: Array<UnionUserInfo> }>): Promise<void> {\n        const organizations: Array<Organization> = [];\n        if (organizationId) {\n            const organization = await this.organizationRepository.findOneById(organizationId);\n            if (!organization) {\n                throw new HttpException(\"指定id=\" + organizationId + \"组织不存在\", 402);\n            }\n            organizations.push(organization);\n        }\n        const exist: User | undefined = await this.userRepository.findOne({ userName });\n        if (exist) {\n            throw new HttpException(\"指定userName=\" + userName + \"用户已存在\", 406);\n        }\n        const salt = createHash(\"sha256\").update(new Date().toString()).digest(\"hex\").slice(0, 10);\n        const passwordWithSalt = createHash(\"sha256\").update(password + salt).digest(\"hex\");\n        const user: User = this.userRepository.create({\n            userName,\n            password: passwordWithSalt,\n            salt,\n            status: true,\n            recycle: false,\n            organizations,\n            userInfos: [],\n            infoItems: [],\n        });\n        for (let i = 0; i < groups.length; i++) {\n            const { groupId, infos } = groups[i];\n            const group: InfoGroup | undefined = await this.infoGroupRepository.findOneById(\n                groupId,\n                { relations: [\"items\"] },\n            );\n            if (!group) {\n                throw new HttpException(\"指定信息组id=\" + groupId + \"不存在\", 408);\n            }\n            await this.addUserInfosAndInfoItems(req, user, group, infos);\n        }\n        try {\n            await this.userRepository.save(user);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async addUserInfoToUser(req: IncomingMessage, id: number, groups: Array<{ groupId: number, infos: Array<UnionUserInfo> }>): Promise<void> {\n        const user: User | undefined = await this.userRepository.findOneById(\n            id,\n            { relations: [\"userInfos\", \"infoItems\"] },\n        );\n        if (!user) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n        }\n        for (let i = 0; i < groups.length; i++) {\n            const { groupId, infos } = groups[i];\n            const group: InfoGroup | undefined = await this.infoGroupRepository.findOneById(\n                groupId,\n                { relations: [\"items\"] },\n            );\n            if (!group) {\n                throw new HttpException(\"指定信息组id=\" + groupId + \"不存在\", 408);\n            }\n            await this.addUserInfosAndInfoItems(req, user, group, infos);\n        }\n        try {\n            await this.userRepository.save(user);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    /* 将指定信息组的信息加入到用户对象中，里面没有数据库更改操作，只是改变了用户的userInfos、infoItems两个属性，当save时新的userInfo会被插入，旧的会被更新，infoItem与user的关系会被建立*/\n    async addUserInfosAndInfoItems(req: IncomingMessage, user: User, group: InfoGroup, infos: Array<UnionUserInfo>): Promise<void> {\n        // 获取所有信息项\n        const items: Array<InfoItem> = group.items || [];\n        // 所有必填信息项\n        const necessary: Array<InfoItem> = items.filter(item => {\n            return item.necessary === true;\n        });\n        // 遍历得到的信息\n        for (let j = 0; j < infos.length; j++) {\n            const { name }: UnionUserInfo = infos[j];\n            // 查找名称匹配的信息项\n            const match: InfoItem | undefined = items.find(item => {\n                return item.name === name;\n            });\n            // 如果接收到的信息项名称不存在，抛出异常\n            if (!match) {\n                throw new HttpException(\"指定名称信息项:\" + name + \"不存在于信息组id=\" + group.id + \"中\", 409);\n            }\n            /*获取根据信息项类型转换后的信息值 */\n            const result: string = await this.transfromInfoValue(req, match, infos[j]);\n            /*如果此时user中已经包含同名信息项，后来的覆盖先前的，因为相同信息项可能存在于多个组当中，而添加时可能出现一次添加多个组信息的情况，所以可能出现同类信息项 */\n            const userInfoIndex = user.userInfos.findIndex(userInfo => userInfo.infoItemId === match.id);\n            if (userInfoIndex >= 0) {\n                /*如果当前遍历的信息项对应的信息已经存在于用户的信息当中，直接修改其value\n                  当创建用户时，出现重复，修改value后就会只保存新的用户信息\n                  当添加用户信息时，出现重复，就会修改以前的信息，并且cascaedUpdate*/\n                user.userInfos[userInfoIndex].value = result;\n            } else {\n                /*不存在添加新的 */\n                user.userInfos.push(this.userInfoRepository.create({ infoItem: match, value: result }));\n            }\n            /*获取填写的必填信息项的下标 */\n            const index = necessary.findIndex(item => {\n                return item.id === match.id;\n            });\n            if (index >= 0) {\n                /*移除填写过的必填信息项 */\n                necessary.splice(index, 1);\n            }\n            /*将添加后的信息项加入用户，如果重复保存时会字段去重 */\n            user.infoItems.push(match);\n        }\n        // 如果必填项没有填写，抛出异常\n        if (necessary.length !== 0) {\n            const names = necessary.map(item => item.name);\n            throw new HttpException(\"指定信息项:\" + names.join(\",\") + \"为必填项\", 410);\n        }\n    }\n\n    async transfromInfoValue(req: IncomingMessage, match: InfoItem, info: UnionUserInfo): Promise<string> {\n        let result: string;\n        // 根据不同类型信息项校验信息类型，顺便转换信息值\n        // \"单行文本框\", \"多行文本框\", \"单选框\", \"多选框\", \"复选框\", \"日期时间选择\", \"日期时间范围选择\", \"下拉菜单\", \"上传图片\", \"上传文件\"\n        if (match.type\n            === \"text\"\n            || match.type\n            === \"textarea\"\n            || match.type\n            === \"radio\"\n            || match.type\n            === \"date\"\n            || match.type\n            === \"number\"\n            || match.type\n            === \"pulldownmenu\") {\n            if (!(\n                info as TextInfo\n            ).value) {\n                throw new HttpException(\"指定名称信息值:\" + match.name + \"不存在\", 410);\n            }\n            if (typeof (\n                info as TextInfo\n            ).value !== \"string\") {\n                throw new HttpException(\"指定名称信息项name=\" + match.name + \"必须为字符串\", 410);\n            }\n            // 普字符串类型值只需要删除前后空白\n            result = (\n                info as TextInfo\n            ).value.trim();\n        } else if (match.type === \"checkbox\") {\n            if (!(\n                info as ArrayInfo\n            ).array || (\n                info as ArrayInfo\n            ).array.length === 0) {\n                throw new HttpException(\"指定名称信息值:\" + match.name + \"不存在\", 410);\n            }\n            if (!(\n                (\n                    info as ArrayInfo\n                ).array instanceof Array\n            )) {\n                throw new HttpException(\"指定名称信息项name=\" + match.name + \"必须为数组\", 410);\n            }\n            // 数组类型以，连接各个元素为字符串\n            result = (\n                info as ArrayInfo\n            ).array.join(\",\");\n        } else {\n            if (!(\n                info as FileInfo\n            ).base64) {\n                throw new HttpException(\"指定名称信息项name=\" + match.name + \"必须具有文件base64编码\", 410);\n            }\n            if (!(\n                info as FileInfo\n            ).rawName) {\n                throw new HttpException(\"指定名称信息项name=\" + match.name + \"必须具有文件原名\", 410);\n            }\n            if (!(\n                info as FileInfo\n            ).bucketName) {\n                throw new HttpException(\"指定名称信息项name=\" + match.name + \"必须具有文件存储空间名\", 410);\n            }\n            // 文件类型，上传到存储插件，并保存访问url\n            const { bucketName, name, type } = await this.storeComponent.upload(\n                (\n                    info as FileInfo\n                ).bucketName,\n                (\n                    info as FileInfo\n                ).rawName,\n                (\n                    info as FileInfo\n                ).base64,\n                undefined,\n            );\n            result = await this.storeComponent.getUrl(req, bucketName, name, type, undefined as any);\n        }\n        return result;\n    }\n\n    async updateUser(id: number, userName: string, password: string): Promise<void> {\n        const exist: User | undefined = await this.userRepository.findOneById(id);\n        if (!exist) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n        }\n        if (userName !== exist.userName) {\n            const sameUser: User | undefined = await this.userRepository.findOne({ userName });\n            if (sameUser) {\n                throw new HttpException(\"指定userName=\" + userName + \"用户已存在\", 406);\n            }\n        }\n        try {\n            exist.userName = userName;\n            const salt = createHash(\"sha256\").update(new Date().toString()).digest(\"hex\").slice(0, 10);\n            exist.salt = salt;\n            exist.password = createHash(\"sha256\").update(password + salt).digest(\"hex\");\n            await this.userRepository.save(exist);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async bannedUser(id: number): Promise<void> {\n        const exist: User | undefined = await this.userRepository.findOneById(id);\n        if (!exist) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n        }\n        if (exist.recycle) {\n            throw new HttpException(\"指定id=\" + id + \"用户已存在回收站中\", 406);\n        }\n        if (!exist.status) {\n            throw new HttpException(\"指定id=\" + id + \"用户已经封禁\", 406);\n        }\n        try {\n            exist.status = false;\n            await this.userRepository.save(exist);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async unBannedUser(id: number): Promise<void> {\n        const exist: User | undefined = await this.userRepository.findOneById(id);\n        if (!exist) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n        }\n        if (exist.recycle) {\n            throw new HttpException(\"指定id=\" + id + \"用户已存在回收站中\", 406);\n        }\n        if (exist.status) {\n            throw new HttpException(\"指定id=\" + id + \"用户不需要解封\", 406);\n        }\n        try {\n            exist.status = true;\n            await this.userRepository.save(exist);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async softDeleteUser(id: number): Promise<void> {\n        const exist: User | undefined = await this.userRepository.findOneById(id);\n        if (!exist) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n        }\n        if (exist.recycle) {\n            throw new HttpException(\"指定id=\" + id + \"用户已存在回收站中\", 406);\n        }\n        try {\n            exist.recycle = true;\n            await this.userRepository.save(exist);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async restoreUser(id: number): Promise<void> {\n        const exist: User | undefined = await this.userRepository.findOneById(id);\n        if (!exist) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n        }\n        if (!exist.recycle) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在回收站中\", 406);\n        }\n        try {\n            exist.recycle = false;\n            await this.userRepository.save(exist);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async restoreUsers(ids: Array<number>): Promise<void> {\n        const users: Array<User> = await this.userRepository.findByIds(ids);\n        ids.forEach(id => {\n            const find: User | undefined = users.find(user => {\n                return user.id === id;\n            });\n            if (!find) {\n                throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n            }\n            if (!find.recycle) {\n                throw new HttpException(\"指定用户id=\" + id + \"不在回收站中\", 406);\n            }\n            find.recycle = false;\n        });\n        try {\n            await this.userRepository.save(users);\n\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async deleteUser(id: number): Promise<void> {\n        const exist: User | undefined = await this.userRepository.findOneById(id);\n        if (!exist) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n        }\n        if (!exist.recycle) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在回收站中\", 406);\n        }\n        const queryRunner: QueryRunner = this.connection.createQueryRunner(\"master\");\n        await queryRunner.startTransaction();\n        try {\n            /* 在一个事务中删除用户以及其他模块中用户信息 */\n            await queryRunner.manager.remove(exist);\n            for (let i = 0; i < this.userInfoManagers.length; i++) {\n                await this.userInfoManagers[i].deleteUserInfo(queryRunner.manager, id);\n            }\n            await queryRunner.commitTransaction();\n        } catch (err) {\n            await queryRunner.rollbackTransaction();\n        } finally {\n            await queryRunner.release();\n        }\n\n    }\n\n    async deleteUsers(ids: Array<number>): Promise<void> {\n        const users: Array<User> = await this.userRepository.findByIds(ids);\n        ids.forEach(id => {\n            const find = users.find(user => {\n                return user.id === id;\n            });\n            if (!find) {\n                throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n            }\n            if (!find.recycle) {\n                throw new HttpException(\"指定id=\" + id + \"用户不存在于回收站中\", 406);\n            }\n        });\n        try {\n            await this.userRepository.remove(users);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async setRoles(id: number, roleIds: Array<number>): Promise<void> {\n        const user: User | undefined = await this.userRepository.findOneById(id, { relations: [\"roles\"] });\n        if (!user) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n        }\n        const roles: Array<Role> = await this.roleRepository.findByIds(roleIds);\n        roleIds.forEach(roleId => {\n            const find = roles.find(role => {\n                return role.id === roleId;\n            });\n            if (!find) {\n                throw new HttpException(\"指定id=\" + roleId + \"角色不存在\", 406);\n            }\n        });\n        user.roles = roles;\n        try {\n            await this.userRepository.save(user);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async setPermissions(id: number, permissionIds: Array<number>): Promise<void> {\n        const user: User | undefined = await this.userRepository.findOneById(\n            id,\n            { relations: [\"roles\", \"adds\", \"reduces\"] },\n        );\n        if (!user) {\n            throw new HttpException(\"指定id=\" + id + \"用户不存在\", 406);\n        }\n        // 声明从role获取的权限集合\n        const result: Array<Permission> = [];\n        // 声明临时结果，未去重\n        let temp: Array<Permission> = [];\n        // 用来去重的集合\n        const ids: Set<number> = new Set();\n        // 遍历获取所有角色拥有的权限\n        for (let i = 0; i < user.roles.length; i++) {\n            const role: Role | undefined = await this.roleRepository.findOneById(\n                user.roles[i].id,\n                { relations: [\"funcs\"] },\n            );\n            if (role && role.funcs && role.funcs.length > 0) {\n                for (let j = 0; j < role.funcs.length; j++) {\n                    const func: Func | undefined = await this.funcRepository.findOneById(\n                        role.funcs[i].id,\n                        { relations: [\"permissions\"] },\n                    );\n                    if (func) {\n                        temp = temp.concat(func.permissions);\n                    }\n                }\n            }\n        }\n        // 生成去重的集合\n        temp.forEach(per => {\n            if (!ids.has(per.id)) {\n                ids.add(per.id);\n                result.push(per);\n            }\n        });\n        // 对参数进行去重\n        permissionIds = [].concat(...new Set(permissionIds) as any);\n        // 声明计算出来的添加权限、减少权限、以及参数指定的权限\n        const adds: Array<Permission> = [];\n        const reduces: Array<Permission> = [];\n        const permissions: Array<Permission> = await this.permissionRepository.findByIds(permissionIds);\n        // 遍历获取添加的权限\n        permissions.forEach(per => {\n            const find = result.find(p => {\n                return p.id === per.id;\n            });\n            // 如果参数设置的权限在角色拥有权限中未找到，则为添加的权限\n            if (!find) {\n                adds.push(per);\n            }\n        });\n        // 遍历获取减少的权限\n        result.forEach(per => {\n            const find = permissions.find(p => {\n                return p.id === per.id;\n            });\n            // 如果角色拥有权限在参数指定的结果中未找到，那么说吗这个权限被减去了\n            if (!find) {\n                reduces.push(per);\n            }\n        });\n        try {\n            user.adds = adds;\n            user.reduces = reduces;\n            await this.userRepository.save(user);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n}\n"]}