{"version":3,"sources":["service/score.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAmE;AACnE,6CAAmD;AACnD,qCAAqC;AACrC,wDAA8C;AAC9C,kEAAuD;AACvD,sDAA4C;AAC5C,mDAA+C;AAG/C,IAAa,YAAY,GAAzB;IAEI,YACwC,SAAoB,EACf,cAAgC,EAC/B,eAAkC,EAC9B,mBAA0C;QAHpD,cAAS,GAAT,SAAS,CAAW;QACf,mBAAc,GAAd,cAAc,CAAkB;QAC/B,oBAAe,GAAf,eAAe,CAAmB;QAC9B,wBAAmB,GAAnB,mBAAmB,CAAuB;IAE5F,CAAC;IAEK,QAAQ,CAAC,MAAc,EAAE,WAAmB;;YAC9C,MAAM,SAAS,GAA0B,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC7F,IAAI,CAAC,SAAS,EAAE;gBACZ,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,WAAW,GAAG,SAAS,EAAE,GAAG,CAAC,CAAC;aACnE;YACD,MAAM,IAAI,GAAqB,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YACpG,IAAI,CAAC,IAAI,EAAE;gBACP,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,MAAM,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;aAC5D;YACD,MAAM,KAAK,GAAsB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACtD,OAAO,KAAK,CAAC,WAAW,KAAK,SAAS,CAAC,EAAE,CAAC;YAC9C,CAAC,CAAC,CAAC;YAEH,IAAI,KAAK,EAAE;gBACP,IAAI,SAAS,CAAC,IAAI,KAAK,KAAK,EAAE;oBAC1B,OAAO,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;iBAC5C;qBAAM;oBACH,OAAO,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;iBAC9C;aACJ;iBAEI;gBACD,MAAM,KAAK,GAAU,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;gBAChF,IAAI;oBACA,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC1C;gBAAC,OAAO,GAAG,EAAE;oBACV,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;iBAC1D;gBACD,OAAO,CAAC,CAAC;aACZ;QACL,CAAC;KAAA;IAEK,QAAQ,CAAC,MAAc,EAAE,WAAmB,EAAE,GAAW;;YAC3D,MAAM,SAAS,GAAwB,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC3F,IAAI,CAAC,SAAS,EAAE;gBACZ,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,WAAW,GAAG,SAAS,EAAE,GAAG,CAAC,CAAC;aACnE;YACD,MAAM,IAAI,GAAmB,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAClG,IAAI,CAAC,IAAI,EAAE;gBACP,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,MAAM,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;aAC5D;YACD,IAAI,KAAK,GAAoB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAClD,OAAO,KAAK,CAAC,WAAW,KAAK,SAAS,CAAC,EAAE,CAAC;YAC9C,CAAC,CAAC,CAAC;YAEH,IAAI,KAAK,EAAE;gBACP,IAAI,SAAS,CAAC,IAAI,KAAK,KAAK,EAAE;oBAC1B,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;iBAC/E;qBAAM,IAAI,SAAS,CAAC,IAAI,KAAK,OAAO,EAAE;oBACnC,KAAK,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;iBAC5D;aACJ;iBAEI;gBACD,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;gBACzD,IAAI,SAAS,CAAC,IAAI,KAAK,KAAK,EAAE;oBAC1B,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;iBAC3C;qBAAM,IAAI,SAAS,CAAC,IAAI,KAAK,OAAO,EAAE;oBACnC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;iBAC7C;aACJ;YACD,IAAI;gBACA,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC1C;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC1D;QACL,CAAC;KAAA;CAEJ,CAAA;AA9EY,YAAY;IADxB,mBAAU,EAAE;IAIJ,WAAA,eAAM,CAAC,sBAAS,CAAC,CAAA;IACjB,WAAA,0BAAgB,CAAC,kBAAI,CAAC,CAAA;IACtB,WAAA,0BAAgB,CAAC,oBAAK,CAAC,CAAA;IACvB,WAAA,0BAAgB,CAAC,6BAAS,CAAC,CAAA;qCAHmB,sBAAS;QACC,oBAAU;QACR,oBAAU;QACF,oBAAU;GANxE,YAAY,CA8ExB;AA9EY,oCAAY","file":"score.service.js","sourcesContent":["import { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { Score } from \"../model/score.entity\";\nimport { ScoreType } from \"../model/score.type.entity\";\nimport { User } from \"../model/user.entity\";\nimport { FloatUtil } from \"../util/float.util\";\n\n@Injectable()\nexport class ScoreService {\n\n    constructor(\n        @Inject(FloatUtil) private readonly floatUtil: FloatUtil,\n        @InjectRepository(User) private readonly userRepository: Repository<User>,\n        @InjectRepository(Score) private readonly scoreRepository: Repository<Score>,\n        @InjectRepository(ScoreType) private readonly scoreTypeRepository: Repository<ScoreType>\n    ) {\n    }\n\n    async getScore(userId: number, scoreTypeId: number): Promise<number> {\n        const scoreType: ScoreType | undefined = await this.scoreTypeRepository.findOne(scoreTypeId);\n        if (!scoreType) {\n            throw new HttpException(\"指定id=\" + scoreTypeId + \"积分类型不存在\", 427);\n        }\n        const user: User | undefined = await this.userRepository.findOne(userId, { relations: [\"scores\"] });\n        if (!user) {\n            throw new HttpException(\"指定id=\" + userId + \"用户不存在\", 428);\n        }\n        const score: Score | undefined = user.scores.find(score => {\n            return score.scoreTypeId === scoreType.id;\n        });\n        /* 如果积分存在直接返回 */\n        if (score) {\n            if (scoreType.type === \"int\") {\n                return Number.parseInt(score.value + \"\");\n            } else {\n                return Number.parseFloat(score.value + \"\");\n            }\n        }\n        /* 积分不存在创建，并存储，初值为0 */\n        else {\n            const score: Score = this.scoreRepository.create({ value: 0, scoreType, user });\n            try {\n                await this.scoreRepository.save(score);\n            } catch (err) {\n                throw new HttpException(\"数据库错误\" + err.toString(), 401);\n            }\n            return 0;\n        }\n    }\n\n    async setScore(userId: number, scoreTypeId: number, add: number): Promise<void> {\n        const scoreType: ScoreType|undefined = await this.scoreTypeRepository.findOne(scoreTypeId);\n        if (!scoreType) {\n            throw new HttpException(\"指定id=\" + scoreTypeId + \"积分类型不存在\", 427);\n        }\n        const user: User|undefined = await this.userRepository.findOne(userId, { relations: [\"scores\"] });\n        if (!user) {\n            throw new HttpException(\"指定id=\" + userId + \"用户不存在\", 428);\n        }\n        let score: Score|undefined = user.scores.find(score => {\n            return score.scoreTypeId === scoreType.id;\n        });\n        /* 如果积分存在加上添加值 */\n        if (score) {\n            if (scoreType.type === \"int\") {\n                score.value = Number.parseInt(score.value + \"\") + Number.parseInt(add + \"\");\n            } else if (scoreType.type === \"float\") {\n                score.value = await this.floatUtil.add(score.value, add);\n            }\n        }\n        /* 积分不存在创建，并存储，初值为0 */\n        else {\n            score = this.scoreRepository.create({ scoreType, user });\n            if (scoreType.type === \"int\") {\n                score.value = Number.parseInt(add + \"\");\n            } else if (scoreType.type === \"float\") {\n                score.value = Number.parseFloat(add + \"\");\n            }\n        }\n        try {\n            await this.scoreRepository.save(score);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n}\n"]}