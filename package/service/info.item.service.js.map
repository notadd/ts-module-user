{"version":3,"sources":["service/info.item.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA0D;AAC1D,6CAAmD;AACnD,qCAAqC;AACrC,gEAAqD;AAGrD,IAAa,eAAe,GAA5B;IAEI,YACiD,kBAAwC;QAAxC,uBAAkB,GAAlB,kBAAkB,CAAsB;IAEzF,CAAC;IAGK,cAAc,CAAC,IAAY,EAAE,KAAa,EAAE,WAAmB,EAAE,IAAY,EAAE,SAAkB,EAAE,eAAwB,EAAE,kBAA2B,EAAE,KAAa;;YACzK,MAAM,KAAK,GAAuB,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;YAClF,IAAI,KAAK,EAAE;gBACP,MAAM,IAAI,sBAAa,CAAC,aAAa,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC;aACtD;YACD,IAAI,SAAS,IAAI,CAAC,eAAe,EAAE;gBAC/B,MAAM,IAAI,sBAAa,CAAC,WAAW,GAAG,IAAI,GAAG,eAAe,EAAE,GAAG,CAAC,CAAC;aACtE;YACD,MAAM,IAAI,GAAa,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC;gBAClD,IAAI;gBACJ,KAAK;gBACL,OAAO,EAAE,KAAK;gBACd,WAAW;gBACX,IAAI;gBACJ,SAAS;gBACT,eAAe;gBACf,kBAAkB;gBAClB,KAAK;aACR,CAAC,CAAC;YACH,IAAI;gBACA,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC5C;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC1D;QACL,CAAC;KAAA;IAGK,cAAc,CAAC,EAAU,EAAE,IAAY,EAAE,KAAa,EAAE,WAAmB,EAAE,IAAY,EAAE,SAAkB,EAAE,eAAwB,EAAE,kBAA2B,EAAE,KAAa;;YACrL,MAAM,KAAK,GAAuB,MAAM,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAChF,IAAI,CAAC,KAAK,EAAE;gBACR,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,EAAE,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC;aACzD;YAED,IAAI,KAAK,CAAC,OAAO,EAAE;gBACf,MAAM,IAAI,sBAAa,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;aAC9C;YACD,IAAI,SAAS,IAAI,CAAC,eAAe,EAAE;gBAC/B,MAAM,IAAI,sBAAa,CAAC,WAAW,GAAG,IAAI,GAAG,eAAe,EAAE,GAAG,CAAC,CAAC;aACtE;YACD,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;gBACrB,MAAM,MAAM,GAAuB,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;gBACnF,IAAI,MAAM,EAAE;oBACR,MAAM,IAAI,sBAAa,CAAC,SAAS,GAAG,IAAI,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC;iBAC7D;aACJ;YACD,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;YAClB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;YACpB,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;YAChC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;YAClB,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;YAC5B,KAAK,CAAC,eAAe,GAAG,eAAe,CAAC;YACxC,KAAK,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;YAC9C,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;YACpB,IAAI;gBACA,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC7C;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC1D;QACL,CAAC;KAAA;IAGK,cAAc,CAAC,EAAU;;YAC3B,MAAM,KAAK,GAAuB,MAAM,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAChF,IAAI,CAAC,KAAK,EAAE;gBACR,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,EAAE,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC;aACzD;YAED,IAAI,KAAK,CAAC,OAAO,EAAE;gBACf,MAAM,IAAI,sBAAa,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;aAC9C;YACD,IAAI;gBACA,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC/C;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC1D;QACL,CAAC;KAAA;IAGK,eAAe,CAAC,GAAkB;;YACpC,MAAM,SAAS,GAAoB,MAAM,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAEhF,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;gBACb,MAAM,IAAI,GAAuB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBACnD,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC;gBAC1B,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,IAAI,EAAE;oBACP,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,EAAE,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC;iBACzD;gBAED,IAAI,IAAI,CAAC,OAAO,EAAE;oBACd,MAAM,IAAI,sBAAa,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;iBAC9C;YACL,CAAC,CAAC,CAAC;YACH,IAAI;gBACA,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;aACnD;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,IAAI,sBAAa,CAAC,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;aAC1D;QACL,CAAC;KAAA;CAEJ,CAAA;AA5GY,eAAe;IAD3B,kBAAS,EAAE;IAIH,WAAA,0BAAgB,CAAC,2BAAQ,CAAC,CAAA;qCAAsC,oBAAU;GAHtE,eAAe,CA4G3B;AA5GY,0CAAe","file":"info.item.service.js","sourcesContent":["import { Component, HttpException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { InfoItem } from \"../model/info.item.entity\";\n\n@Component()\nexport class InfoItemService {\n\n    constructor(\n        @InjectRepository(InfoItem) private readonly infoItemRepository: Repository<InfoItem>\n    ) {\n    }\n\n    /* 创建信息项 */\n    async createInfoItem(name: string, label: string, description: string, type: string, necessary: boolean, registerVisible: boolean, informationVisible: boolean, order: number): Promise<void> {\n        const exist: InfoItem|undefined = await this.infoItemRepository.findOne({ name });\n        if (exist) {\n            throw new HttpException(\"指定名称信息项已存在：\" + name, 412);\n        }\n        if (necessary && !registerVisible) {\n            throw new HttpException(\"指定名称name=\" + name + \"必填信息项，注册时必须可见\", 412);\n        }\n        const item: InfoItem = this.infoItemRepository.create({\n            name,\n            label,\n            default: false,\n            description,\n            type,\n            necessary,\n            registerVisible,\n            informationVisible,\n            order\n        });\n        try {\n            await this.infoItemRepository.save(item);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    /* 更新信息项 */\n    async updateInfoItem(id: number, name: string, label: string, description: string, type: string, necessary: boolean, registerVisible: boolean, informationVisible: boolean, order: number): Promise<void> {\n        const exist: InfoItem|undefined = await this.infoItemRepository.findOneById(id);\n        if (!exist) {\n            throw new HttpException(\"指定id=\" + id + \"信息项不存在\", 413);\n        }\n        // 默认信息项无法更新\n        if (exist.default) {\n            throw new HttpException(\"默认信息项不允许更新\", 413);\n        }\n        if (necessary && !registerVisible) {\n            throw new HttpException(\"指定名称name=\" + name + \"必填信息项，注册时必须可见\", 412);\n        }\n        if (name !== exist.name) {\n            const exist1: InfoItem|undefined = await this.infoItemRepository.findOne({ name });\n            if (exist1) {\n                throw new HttpException(\"指定name=\" + name + \"信息项已存在\", 412);\n            }\n        }\n        exist.name = name;\n        exist.label = label;\n        exist.description = description;\n        exist.type = type;\n        exist.necessary = necessary;\n        exist.registerVisible = registerVisible;\n        exist.informationVisible = informationVisible;\n        exist.order = order;\n        try {\n            await this.infoItemRepository.save(exist);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    /* 删除信息项，这里默认的行为是删除信息项时，由它生成的用户信息UserInfo不会删除*/\n    async deleteInfoItem(id: number): Promise<void> {\n        const exist: InfoItem|undefined = await this.infoItemRepository.findOneById(id);\n        if (!exist) {\n            throw new HttpException(\"指定id=\" + id + \"信息项不存在\", 413);\n        }\n        // 默认信息项无法删除\n        if (exist.default) {\n            throw new HttpException(\"默认信息项不允许删除\", 413);\n        }\n        try {\n            await this.infoItemRepository.remove(exist);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    /* 一次删除多个信息项，还是不会删除UserInfo */\n    async deleteInfoItems(ids: Array<number>): Promise<void> {\n        const infoItems: Array<InfoItem> = await this.infoItemRepository.findByIds(ids);\n        // 检查是否所有id的信息项都存在\n        ids.forEach(id => {\n            const find: InfoItem|undefined = infoItems.find(item => {\n                return item.id === id;\n            });\n            if (!find) {\n                throw new HttpException(\"指定id=\" + id + \"信息项不存在\", 413);\n            }\n            // 默认信息项无法删除\n            if (find.default) {\n                throw new HttpException(\"默认信息项不允许删除\", 413);\n            }\n        });\n        try {\n            await this.infoItemRepository.remove(infoItems);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n}\n"]}