{"version":3,"sources":["service/score.type.service.ts"],"names":[],"mappings":"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","file":"score.type.service.js","sourcesContent":["import { Injectable, HttpException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { ScoreType } from \"../model/score.type.entity\";\n\n@Injectable()\nexport class ScoreTypeService {\n\n    constructor(\n        @InjectRepository(ScoreType) private readonly scoreTypeRepository: Repository<ScoreType>\n    ) {\n    }\n\n    async getAll(): Promise<Array<ScoreType>> {\n        return this.scoreTypeRepository.find();\n    }\n\n    async createScoreType(name: string, type: string, description: string): Promise<void> {\n        const exist: ScoreType|undefined = await this.scoreTypeRepository.findOne({ name });\n        if (exist) {\n            throw new HttpException(`指定名称name=${name}积分类型已存在`, 424);\n        }\n        // 方法中创建的积分项都是非默认的\n        const scoreType: ScoreType|undefined = this.scoreTypeRepository.create({ name, type, default: false, description });\n        try {\n            await this.scoreTypeRepository.save(scoreType);\n        } catch (err) {\n            throw new HttpException(`数据库错误：${err.toString()}`, 401);\n        }\n    }\n\n    async updateScoreType(id: number, name: string, type: string, description: string): Promise<void> {\n        const original: ScoreType|undefined = await this.scoreTypeRepository.findOne(id);\n        if (!original) {\n            throw new HttpException(`指定id=${id}积分类型不存在`, 425);\n        }\n        if (original.default) {\n            throw new HttpException(\"默认积分类型不允许更改\", 426);\n        }\n        if (name !== original.name) {\n            const exist: ScoreType|undefined = await this.scoreTypeRepository.findOne({ name });\n            if (exist) {\n                throw new HttpException(`指定名称name=${name}积分类型已存在`, 424);\n            }\n        }\n        try {\n            original.name = name;\n            original.type = type;\n            original.description = description;\n            await this.scoreTypeRepository.save(original);\n        } catch (err) {\n            throw new HttpException(`数据库错误：${err.toString()}`, 401);\n        }\n    }\n\n    async deleteScoreType(id: number): Promise<void> {\n        const exist: ScoreType|undefined = await this.scoreTypeRepository.findOne(id);\n        if (!exist) {\n            throw new HttpException(`指定id=${id}积分类型不存在`, 425);\n        }\n        if (exist.default) {\n            throw new HttpException(\"默认积分类型不允许删除\", 426);\n        }\n        try {\n            await this.scoreTypeRepository.remove(exist);\n        } catch (err) {\n            throw new HttpException(`数据库错误：${err.toString()}`, 401);\n        }\n    }\n\n    async deleteScoreTypes(ids: Array<number>): Promise<void> {\n        const exists: Array<ScoreType> = await this.scoreTypeRepository.findByIds(ids);\n        ids.forEach(id => {\n            const find: ScoreType|undefined = exists.find(exist => {\n                return exist.id === id;\n            });\n            if (!find) {\n                throw new HttpException(`指定id=${id}积分类型不存在`, 425);\n            }\n            if (find.default) {\n                throw new HttpException(\"默认积分类型不允许删除\", 426);\n            }\n        });\n        try {\n            await this.scoreTypeRepository.remove(exists);\n        } catch (err) {\n            throw new HttpException(`数据库错误：${err.toString()}`, 401);\n        }\n    }\n}\n"]}