{"version":3,"sources":["service/organization.service.ts"],"names":[],"mappings":"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","file":"organization.service.js","sourcesContent":["import { Injectable, HttpException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { Organization } from \"../model/organization.entity\";\nimport { User } from \"../model/user.entity\";\n\n@Injectable()\nexport class OrganizationService {\n\n    constructor(\n        @InjectRepository(User) private readonly userRepository: Repository<User>,\n        @InjectRepository(Organization) private readonly organizationRepository: Repository<Organization>\n    ) {\n    }\n\n    async getRoots(): Promise<Array<Organization>> {\n        const os = await this.organizationRepository.createQueryBuilder(\"o\").leftJoinAndSelect(\"o.parent\", \"parent\").getMany();\n        return os.filter(o => !o.parent);\n    }\n\n    async getChildren(id: number): Promise<Array<Organization>> {\n        const o: Organization|undefined = await this.organizationRepository.findOne(id, { relations: [ \"children\" ] });\n        if (!o) {\n            throw new HttpException(\"指定父组织id=\" + id + \"不存在\", 402);\n        }\n        return o.children;\n    }\n\n    async getAll(): Promise<Array<Organization>> {\n        return this.organizationRepository.find();\n    }\n\n    async createOrganization(name: string, parentId: number): Promise<void> {\n        let parent: Organization|undefined;\n        if (parentId !== undefined && parentId !== null) {\n            parent = await this.organizationRepository.findOne(parentId);\n            if (!parent) {\n                throw new HttpException(\"指定父组织id=\" + parentId + \"不存在\", 402);\n            }\n        }\n        const exist: Organization|undefined = await this.organizationRepository.findOne({ name });\n        if (exist) {\n            throw new HttpException(\"指定名称name=\" + name + \"组织已存在\", 403);\n        }\n        // 如果parent为undefined，则parentId为null\n        const organization: Organization = this.organizationRepository.create({ name, parent });\n        try {\n            await this.organizationRepository.save(organization);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async updateOrganization(id: number, name: string, parentId: number): Promise<void> {\n        const exist: Organization|undefined = await this.organizationRepository.findOne(id);\n        if (!exist) {\n            throw new HttpException(\"指定id=\" + id + \"组织不存在\", 404);\n        }\n        if (name !== exist.name) {\n            const exist: Organization|undefined = await this.organizationRepository.findOne({ name });\n            if (exist) {\n                throw new HttpException(\"指定name=\" + name + \"组织已存在\", 404);\n            }\n        }\n        let parent: Organization|undefined ;\n        if (parentId !== undefined && parentId !== null) {\n            parent = await this.organizationRepository.findOne(parentId);\n            if (!parent) {\n                throw new HttpException(\"指定父组织id=\" + parentId + \"不存在\", 402);\n            }\n        }\n        try {\n            // parent必须为null才有效，如果为undefined则不改动\n            // 这一步与级联没有关系，不管级联如何设置\n            exist.name = name;\n            exist.parent = parent as any;\n            await this.organizationRepository.save(exist);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async deleteOrganization(id: number): Promise<void> {\n        const exist: Organization|undefined = await this.organizationRepository.findOne(id, { relations: [ \"children\" ] });\n        if (!exist) {\n            throw new HttpException(\"指定id=\" + id + \"组织不存在\", 404);\n        }\n        if (exist.children && exist.children.length > 0) {\n            throw new HttpException(\"指定组织存在子组织，无法删除\", 404);\n        }\n        try {\n            await this.organizationRepository.remove(exist);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async getUsersInOrganization(id: number): Promise<Array<User>> {\n        const o: Organization|undefined = await this.organizationRepository.findOne(id, { relations: [ \"users\" ] });\n        if (!o) {\n            throw new HttpException(\"指定id=\" + id + \"父组织不存在\", 402);\n        }\n        // 只获取不再回收站中的用户\n        return o.users.filter(user => {\n            return !user.recycle;\n        });\n    }\n\n    async addUserToOrganization(id: number, userId: number): Promise<void> {\n        const o: Organization|undefined = await this.organizationRepository.findOne(id, { relations: [ \"users\" ] });\n        if (!o) {\n            throw new HttpException(\"指定id=\" + id + \"组织不存在\", 402);\n        }\n        const user: User|undefined = await this.userRepository.findOne(userId);\n        if (!user) {\n            throw new HttpException(\"指定id=\" + userId + \"用户不存在\", 402);\n        }\n        const exist: User|undefined = o.users.find(user => {\n            return user.id === userId;\n        });\n        if (exist) {\n            throw new HttpException(\"指定用户id=\" + userId + \"已存在于指定组织id=\" + id + \"中\", 402);\n        }\n        o.users.push(user);\n        try {\n            await this.organizationRepository.save(o);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async addUsersToOrganization(id: number, userIds: Array<number>): Promise<void> {\n        const o: Organization |undefined = await this.organizationRepository.findOne(id, { relations: [ \"users\" ] });\n        if (!o) {\n            throw new HttpException(\"指定id=\" + id + \"组织不存在\", 402);\n        }\n        const users: Array<User> = await this.userRepository.findByIds(userIds);\n        // 验证是否所有需要的用户都被查询出来\n        userIds.forEach(id => {\n            const find: User|undefined = users.find(user => {\n                return user.id === id;\n            });\n            if (!find) {\n                throw new HttpException(\"指定id=\" + id + \"用户不存在\", 402);\n            }\n        });\n        // 验证是否有用户已存在于指定组织下\n        o.users.forEach(user => {\n            const match = userIds.find(id => {\n                return id === user.id;\n            });\n            if (match) {\n                throw new HttpException(\"指定用户id=\" + user.id + \"已存在于指定组织id=\" + id + \"中\", 402);\n            }\n        });\n        o.users.push(...users);\n        try {\n            await this.organizationRepository.save(o);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async removeUserFromOrganization(id: number, userId: number): Promise<void> {\n        const o: Organization|undefined = await this.organizationRepository.findOne(id, { relations: [ \"users\" ] });\n        if (!o) {\n            throw new HttpException(\"指定id=\" + id + \"组织不存在\", 402);\n        }\n        const user: User|undefined = await this.userRepository.findOne(userId);\n        if (!user) {\n            throw new HttpException(\"指定id=\" + userId + \"用户不存在\", 402);\n        }\n        const index = o.users.findIndex(user => {\n            return user.id === userId;\n        });\n        if (index < 0) {\n            throw new HttpException(\"指定用户id=\" + userId + \"不存在于指定组织id=\" + id + \"中\", 402);\n        }\n        o.users.splice(index, 1);\n        try {\n            await this.organizationRepository.save(o);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n\n    async removeUsersFromOrganization(id: number, userIds: Array<number>): Promise<void> {\n        const o: Organization|undefined = await this.organizationRepository.findOne(id, { relations: [ \"users\" ] });\n        if (!o) {\n            throw new HttpException(\"指定id=\" + id + \"组织不存在\", 402);\n        }\n        const users: Array<User> = await this.userRepository.findByIds(userIds);\n        // 从组织的用户中循环移除指定用户，要求用户存在于数据库中，且用户必须已经存在于指定组织中\n        userIds.forEach(userId => {\n            const find: User|undefined = users.find(user => {\n                return user.id === userId;\n            });\n            if (!find) {\n                throw new HttpException(\"指定id=\" + userId + \"用户不存在\", 402);\n            }\n            const index = o.users.findIndex(user => {\n                return user.id === userId;\n            });\n            if (index < 0) {\n                throw new HttpException(\"指定用户id=\" + userId + \"不存在于指定组织id=\" + id + \"中\", 402);\n            }\n            o.users.splice(index, 1);\n        });\n        try {\n            await this.organizationRepository.save(o);\n        } catch (err) {\n            throw new HttpException(\"数据库错误\" + err.toString(), 401);\n        }\n    }\n}\n"]}