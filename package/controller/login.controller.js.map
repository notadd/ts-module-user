{"version":3,"sources":["controller/login.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAqE;AACrE,6CAAmD;AACnD,uDAAmD;AACnD,sDAA4C;AAC5C,qCAAqC;AACrC,iCAAiC;AAGjC,IAAa,eAAe,GAA5B;IAEI,YAC0C,WAAwB,EACrB,cAAgC;QADnC,gBAAW,GAAX,WAAW,CAAa;QACrB,mBAAc,GAAd,cAAc,CAAkB;IACzE,CAAC;IAGC,KAAK,CAAS,IAA4C,EAAS,GAAG;;YACxE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;YACpC,MAAM,IAAI,GAAqB,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,EAAE;gBAC3E,MAAM,EAAE,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC;aAC9D,CAAC,CAAC;YACH,IAAI,CAAC,IAAI,EAAE;gBACP,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;gBAC3C,OAAO;aACV;YAED,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;gBAC7C,OAAO;aACV;YAED,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBACd,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;gBAC5C,OAAO;aACV;YACD,MAAM,gBAAgB,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAChG,IAAI,gBAAgB,KAAK,IAAI,CAAC,QAAQ,EAAE;gBACpC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;gBACzC,OAAO;aACV;YACD,OAAO,IAAI,CAAC,QAAQ,CAAC;YACrB,MAAM,KAAK,GAAW,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACzD,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC;YACvD,OAAO;QACX,CAAC;KAAA;CAEJ,CAAA;AA9BG;IADC,aAAI,CAAC,OAAO,CAAC;IACD,WAAA,aAAI,EAAE,CAAA,EAAgD,WAAA,YAAG,EAAE,CAAA;;;;4CA4BvE;AApCQ,eAAe;IAD3B,mBAAU,CAAC,MAAM,CAAC;IAIV,WAAA,eAAM,CAAC,0BAAW,CAAC,CAAA;IACnB,WAAA,0BAAgB,CAAC,kBAAI,CAAC,CAAA;qCAD4B,0BAAW;QACL,oBAAU;GAJ9D,eAAe,CAsC3B;AAtCY,0CAAe","file":"login.controller.js","sourcesContent":["import { Controller, Post, Body, Res, Inject } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { AuthService } from \"../auth/auth.service\";\nimport { User } from \"../model/user.entity\";\nimport { Repository } from \"typeorm\";\nimport * as crypto from \"crypto\";\n\n@Controller(\"user\")\nexport class LoginController {\n\n    constructor(\n        @Inject(AuthService) private readonly authService: AuthService,\n        @InjectRepository(User) private readonly userRepository: Repository<User>\n    ) { }\n\n    @Post(\"login\")\n    async login(@Body() body: { userName: string, password: string }, @Res() res): Promise<void> {\n        const { userName, password } = body;\n        const user: User | undefined = await this.userRepository.findOne({ userName }, {\n            select: [\"id\", \"userName\", \"password\", \"status\", \"recycle\"]\n        });\n        if (!user) {\n            res.end({ code: 400, message: \"指定用户不存在\" });\n            return;\n        }\n        /* 回收站用户不可登录 */\n        if (user.recycle) {\n            res.end({ code: 400, message: \"指定用户在回收站中\" });\n            return;\n        }\n        /* 封禁用户不可登录 */\n        if (!user.status) {\n            res.end({ code: 400, message: \"指定用户已被封禁\" });\n            return;\n        }\n        const passwordWithSalt = crypto.createHash(\"sha256\").update(password + user.salt).digest(\"hex\");\n        if (passwordWithSalt !== user.password) {\n            res.end({ code: 400, message: \"密码不正确\" });\n            return;\n        }\n        delete user.password;\n        const token: string = this.authService.createToken(user);\n        res.end({ code: 200, message: \"登录成功，返回token\", token });\n        return;\n    }\n\n}\n"]}