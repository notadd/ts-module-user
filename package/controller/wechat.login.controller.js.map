{"version":3,"sources":["controller/wechat.login.controller.ts"],"names":[],"mappings":"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","file":"wechat.login.controller.js","sourcesContent":["import { AccessTokenResponse } from \"../interface/wechat/access.token.response\";\nimport { Controller, Post, Body, Res, Inject, UseFilters, HttpException } from \"@nestjs/common\";\nimport { HttpExceptionFilter } from \"../filter/http.exception.filter\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { AuthService } from \"../auth/auth.service\";\nimport { HttpUtil } from \"../util/http.util\";\nimport { User } from \"../model/user.entity\";\nimport { get, CoreOptions } from \"request\";\nimport { Repository } from \"typeorm\";\nimport * as qs from \"qs\";\n\n@Controller(\"user/wechat\")\n@UseFilters(new HttpExceptionFilter())\nexport class WechatLoginController {\n\n    private readonly oauthUrl: string = \"https://api.weixin.qq.com/sns\";\n    private appid = \"wx2dd40b5b1c24a960\";\n    private secret = \"H14bEjt0IjT6p8MW76p9q0HYuhyFS1HV\";\n    private readonly tokenMap: Map<string, { access_token: string, refresh_token: string }> = new Map();\n\n    constructor(\n        @Inject(HttpUtil) private readonly httpUtil: HttpUtil,\n        @Inject(AuthService) private readonly authService: AuthService,\n        @InjectRepository(User) private readonly userRepository: Repository<User>\n    ) { }\n\n    @Post(\"login\")\n    async wechatLogin(@Body() body: { code: string }, @Res() res): Promise<void> {\n        const { code } = body;\n        if (!code) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const { openid, access_token, refresh_token }: AccessTokenResponse = await this.getAccessToken(this.appid, this.secret, code);\n        this.tokenMap.set(openid, { access_token, refresh_token });\n        let user: User | undefined = await this.userRepository.findOne({ userName: openid }, { select: [\"id\", \"userName\", \"status\", \"recycle\"] });\n        if (!user) {\n            const newUser: User = this.userRepository.create({ userName: openid, status: true, recycle: false });\n            user = await this.userRepository.save(newUser);\n        }\n        const token: string = this.authService.createToken(user);\n        res.json({ code: 200, message: \"微信用户登录成功\", openid, token });\n        res.end();\n        return;\n    }\n\n    async getAccessToken(appid: string, secret: string, code: string): Promise<AccessTokenResponse> {\n        const options: CoreOptions = {\n            baseUrl: this.oauthUrl,\n            qs: {\n                appid,\n                secret,\n                code,\n                grant_type: \"authorization_code\"\n            }\n        };\n        const result = await this.httpUtil.wechatOauthGet(\"/oauth2/access_token\", options);\n        return result;\n    }\n\n    async getUserInfo(accessToken: string, openid: string): Promise<any> {\n        const options: CoreOptions = {\n            baseUrl: this.oauthUrl,\n            qs: {\n                access_token: accessToken,\n                openid,\n                lang: \"zh_CN\"\n            }\n        };\n        const result = await this.httpUtil.wechatOauthGet(\"/userinfo\", options);\n        return result;\n    }\n\n}\n"]}