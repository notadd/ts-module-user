{"version":3,"sources":["user.module.ts"],"names":[],"mappings":"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","file":"user.module.js","sourcesContent":["import { ModulesContainer } from \"@nestjs/core/injector/modules-container\";\nimport { PERMISSION_DEFINITION } from \"./decorator/permission.definition\";\nimport { UserComponentProvider } from \"./export/user.component.provider\";\nimport { OrganizationResolver } from \"./resolver/organization.resolver\";\nimport { Global, Inject, Module, OnModuleInit } from \"@nestjs/common\";\nimport { OrganizationService } from \"./service/organization.service\";\nimport { ScoreTypeResolver } from \"./resolver/score.type.resolver\";\nimport { InfoGroupResolver } from \"./resolver/info.group.resolver\";\nimport { InjectRepository, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { InfoItemResolver } from \"./resolver/info.item.resolver\";\nimport { MetadataScanner } from \"@nestjs/core/metadata-scanner\";\nimport { Module as ModuleEntity } from \"./model/module.entity\";\nimport { Organization } from \"./model/organization.entity\";\nimport { MODULE_TOKEN } from \"./guard/permission.guard\";\nimport { Permission } from \"./model/permission.entity\";\nimport { InfoGroup } from \"./model/info.group.entity\";\nimport { Repository } from \"typeorm\";\nimport { Func } from \"./model/func.entity\";\nimport { InfoItem } from \"./model/info.item.entity\";\nimport { Role } from \"./model/role.entity\";\nimport { Score } from \"./model/score.entity\";\nimport { ScoreType } from \"./model/score.type.entity\";\nimport { User } from \"./model/user.entity\";\nimport { UserInfo } from \"./model/user.info.entity\";\nimport { FuncResolver } from \"./resolver/func.resolver\";\nimport { ModuleResolver } from \"./resolver/module.resolver\";\nimport { RoleResolver } from \"./resolver/role.resolver\";\nimport { ScoreResolver } from \"./resolver/score.resolver\";\nimport { UserResolver } from \"./resolver/user.resolver\";\nimport { FuncService } from \"./service/func.service\";\nimport { InfoGroupService } from \"./service/info.group.service\";\nimport { InfoItemService } from \"./service/info.item.service\";\nimport { ModuleService } from \"./service/module.service\";\nimport { RoleService } from \"./service/role.service\";\nimport { ScoreService } from \"./service/score.service\";\nimport { ScoreTypeService } from \"./service/score.type.service\";\nimport { UserService } from \"./service/user.service\";\nimport { FloatUtil } from \"./util/float.util\";\n\n@Global()\n@Module({\n    modules: [\n        TypeOrmModule.forFeature([\n            ModuleEntity,\n            Organization,\n            User,\n            ScoreType,\n            Score,\n            InfoGroup,\n            InfoItem,\n            UserInfo,\n            Role,\n            Func,\n            Permission,\n        ]),\n    ],\n    components: [\n        FloatUtil,\n        OrganizationService,\n        OrganizationResolver,\n        ScoreTypeService,\n        ScoreTypeResolver,\n        InfoGroupService,\n        InfoGroupResolver,\n        InfoItemService,\n        InfoItemResolver,\n        ModuleService,\n        ModuleResolver,\n        ScoreService,\n        ScoreResolver,\n        FuncService,\n        FuncResolver,\n        UserService,\n        UserResolver,\n        RoleService,\n        RoleResolver,\n        UserComponentProvider,\n    ],\n    exports: [\n        UserComponentProvider,\n        UserService,\n    ],\n})\nexport class UserModule implements OnModuleInit {\n\n    private readonly metadataScanner: MetadataScanner;\n\n    constructor(\n        @Inject(ModulesContainer.name) private readonly moduleMap: ModulesContainer,\n        @InjectRepository(Role) private readonly roleRepository: Repository<Role>,\n        @InjectRepository(Func) private readonly funcRepository: Repository<Func>,\n        @InjectRepository(Module) private readonly moduleRepository: Repository<ModuleEntity>,\n        @InjectRepository(InfoItem) private readonly infoItemRepository: Repository<InfoItem>,\n        @InjectRepository(ScoreType) private readonly scoreTypeRepository: Repository<ScoreType>,\n        @InjectRepository(InfoGroup) private readonly infoGroupRepository: Repository<InfoGroup>,\n        @InjectRepository(Permission) private readonly permissionRepository: Repository<Permission>,\n    ) {\n        this.metadataScanner = new MetadataScanner();\n    }\n\n    async onModuleInit(): Promise<void> {\n        // 遍历模块，检查权限定义\n        await this.checkPermissionDefinition();\n        // 确保默认信息组的存在\n        await this.addDefaultInfoGroup();\n        // 确保默认积分类型的存在\n        await this.addDefaultScoreType();\n    }\n\n    /* 在初始化钩子中遍历所有模块\n       获取定义在Controller与Resolver上的权限定义\n       权限定义可以定义在类上或者原型方法上，与UseGuard的使用方法相同\n       一个位置可以定义多个权限，作为数组存储在元数据userpm:permission_definition中\n       一个模块中定义的重复权限，会被覆盖，不会报错\n       新增模块直接保存，既有模块对原有权限与本次扫描出权限进行差分，相同名称权限id不变，保证既有权限与功能关联不变\n       如果原有模块没有在这次遍历中被发现权限，则模块连带权限、功能、角色一起删除\n     */\n    async checkPermissionDefinition(): Promise<void> {\n        // 获取当前既有模块，关联获取模块具有的权限、功能、角色\n        const modules: Array<ModuleEntity> = await this.moduleRepository.find({\n            relations: [\n                \"permissions\",\n                \"funcs\",\n                \"roles\",\n            ],\n        });\n        // 遍历模块token、Module实例\n        for (const [ key, value ] of this.moduleMap.entries()) {\n            // 模块名称，直接使用nest容器里面存储Module的key，不会重复\n            const token = key;\n            // 组件,包含了路由\n            const components = [ ...value.components, ...value.routes ];\n            // 获取到的权限定义，使用map为了name不重复\n            const permissions: Map<string, Permission> = new Map();\n            // 遍历组件、路由\n            for (const component of components) {\n                // 名称、实例包装器\n                const [ key, value ] = component;\n                // 只有resolver、controller才会被遍历，其他组件上定义权限无效\n                const isResolver = Reflect.getMetadata(\"graphql:resolver_type\", value.metatype);\n                const isController = Reflect.getMetadata(\"path\", value.metatype);\n                if (isResolver || isController) {\n                    // 在需要进行权限判断的组件类上定义模块token，用来在guard中判断权限属于哪个模块\n                    Reflect.defineMetadata(MODULE_TOKEN, token, value.metatype);\n                    // 获取组件、控制器类上定义的权限数组\n                    const pers: Array<Permission> = Reflect.getMetadata(PERMISSION_DEFINITION, value.metatype);\n                    // 这里在同一个模块中重复定义的权限会被覆盖\n                    // 保证了name不重复\n                    pers && pers.forEach(per => {\n                        permissions.set(per.name, per);\n                    });\n                    // 遍历实例原型方法，获取方法上定义的权限\n                    const prototype = Object.getPrototypeOf(value.instance);\n                    this.metadataScanner.scanFromPrototype<any, Array<Permission>>(value.instance, prototype, name => {\n                        // 获取到方法名，获取方法上定义的权限\n                        const pers: Array<Permission> = Reflect.getMetadata(\n                            PERMISSION_DEFINITION,\n                            value.metatype,\n                            name,\n                        );\n                        pers && pers.forEach(per => {\n                            permissions.set(per.name, per);\n                        });\n                        return pers;\n                    });\n                }\n            }\n            // 获取到一个模块下所有的权限定义之后，进行保存\n            if (permissions.values) {\n                // 获取权限数组\n                const pers: Array<Permission> = [];\n                for (const value of permissions.values()) {\n                    pers.push(value);\n                }\n                // 查找模块是否已经存在\n                const index = modules.findIndex(module => {\n                    return module.token === token;\n                });\n                // 如果模块已经存在\n                if (index >= 0) {\n                    const module = modules[ index ];\n                    // 对既有权限与本次扫描出权限根据name进行差分\n                    // 遍历本次扫描结果\n                    for (const per of pers) {\n                        // 在既有权限中进行查找\n                        const find: Permission | undefined = module.permissions.find(p => {\n                            return p.name === per.name;\n                        });\n                        // 如果本次扫描到权限在既有权限中未找到\n                        if (!find) {\n                            // 说明为新增权限，保存它\n                            per.module = module;\n                            await this.permissionRepository.save(per);\n                        }\n                        // 如果找到则需要更新\n                        else {\n                            find.description = per.description;\n                            await this.permissionRepository.save(find);\n                        }\n                    }\n\n                    // 遍历既有权限\n                    for (const p of module.permissions) {\n                        // 在本次扫描到的权限中查找既有权限\n                        const find: Permission | undefined = pers.find(per => {\n                            return per.name === p.name;\n                        });\n                        // 如果未找到，说明这个既有权限被删除了\n                        // 因为删除权限而带来的其他变化，暂时不管\n                        if (!find) {\n                            await this.permissionRepository.remove(p);\n                        }\n                    }\n                    // 将已经扫描到的模块从既有模块数组中移除\n                    modules.splice(index, 1);\n                } else if (pers.length > 0) {\n                    // 模块不存在，直接保存它与相应权限\n                    const module: ModuleEntity = this.moduleRepository.create({ token, permissions: pers });\n                    await this.moduleRepository.save(module);\n                } else {\n                    // 模块不存在且没有权限，则不管它\n                }\n            }\n        }\n        // 如果既有模块没有全部被扫描到，那么剩余模块被删除，连带权限、功能、角色\n        if (modules.length > 0) {\n            /* 这里如果直接删除模块，因为外键检查会报错\n               如果删除模块级联删除角色、功能、权限也会发生错误，因为者三者本身就有多对多关系\n               这种情况下，角色-功能、功能-权限、角色-用户、权限-用户等关系都不会被自动解除\n               只能单独删除角色、功能、权限，其相应关系也会删除，最后删除模块\n            */\n            for (let i = 0; i < modules.length; i++) {\n                await this.roleRepository.remove(modules[ i ].roles);\n                await this.funcRepository.remove(modules[ i ].funcs);\n                await this.permissionRepository.remove(modules[ i ].permissions);\n                await this.moduleRepository.remove(modules[ i ]);\n            }\n        }\n    }\n\n    /* 添加默认信息组，包含基本信息组、认证信息组\n      虽然信息组、信息项的id为自动生成，但是如果save方法保存的对象指定了id，在保存时会使用指定的id，如果指定id已存在，则会更新\n    */\n    async addDefaultInfoGroup() {\n        const base: InfoGroup = this.infoGroupRepository.create({ id: 1, name: \"Base\", default: true, status: true });\n        const nickname: InfoItem = this.infoItemRepository.create({\n            id: 1,\n            name: \"nickname\",\n            label: \"昵称\",\n            default: true,\n            description: \"用户昵称\",\n            type: \"text\",\n            necessary: true,\n            registerVisible: true,\n            informationVisible: true,\n            order: 1,\n        });\n        const sex: InfoItem = this.infoItemRepository.create({\n            id: 2,\n            name: \"sex\",\n            label: \"性别\",\n            default: true,\n            description: \"用户性别，只能为男或女\",\n            type: \"radio\",\n            necessary: true,\n            registerVisible: true,\n            informationVisible: true,\n            order: 2,\n        });\n        const age: InfoItem = this.infoItemRepository.create({\n            id: 3,\n            name: \"age\",\n            label: \"年龄\",\n            default: true,\n            description: \"用户年龄，只能为数字\",\n            type: \"number\",\n            necessary: true,\n            registerVisible: true,\n            informationVisible: true,\n            order: 3,\n        });\n        const birthday: InfoItem = this.infoItemRepository.create({\n            id: 4,\n            name: \"birthday\",\n            label: \"生日\",\n            default: true,\n            description: \"用户生日\",\n            type: \"date\",\n            necessary: true,\n            registerVisible: true,\n            informationVisible: true,\n            order: 4,\n        });\n        const headPortrait: InfoItem = this.infoItemRepository.create({\n            id: 5,\n            name: \"headPortrait\",\n            label: \"头像\",\n            default: true,\n            description: \"用户头像，必须为上传图片，需要预览\",\n            type: \"uploadimagewithpreview\",\n            necessary: true,\n            registerVisible: true,\n            informationVisible: true,\n            order: 5,\n        });\n        const sign: InfoItem = this.infoItemRepository.create({\n            id: 6,\n            name: \"sign\",\n            label: \"签名\",\n            default: true,\n            description: \"用户签名，为多行文本\",\n            type: \"textarea\",\n            necessary: true,\n            registerVisible: true,\n            informationVisible: true,\n            order: 6,\n        });\n        base.items = [ nickname, sex, age, birthday, headPortrait, sign ];\n        await this.infoGroupRepository.save(base);\n        const authentication: InfoGroup = this.infoGroupRepository.create({\n            id: 2,\n            name: \"authentication\",\n            default: true,\n            status: true,\n        });\n        const email: InfoItem = this.infoItemRepository.create({\n            id: 7,\n            name: \"email\",\n            label: \"邮箱\",\n            default: true,\n            description: \"用户邮箱\",\n            type: \"text\",\n            necessary: true,\n            registerVisible: true,\n            informationVisible: true,\n            order: 1,\n        });\n        const realName: InfoItem = this.infoItemRepository.create({\n            id: 8,\n            name: \"realName\",\n            label: \"姓名\",\n            default: true,\n            description: \"用户真实姓名\",\n            type: \"text\",\n            necessary: true,\n            registerVisible: true,\n            informationVisible: true,\n            order: 2,\n        });\n        const idNumber: InfoItem = this.infoItemRepository.create({\n            id: 9,\n            name: \"idNumber\",\n            label: \"身份证号\",\n            default: true,\n            description: \"用户身份证号\",\n            type: \"text\",\n            necessary: true,\n            registerVisible: true,\n            informationVisible: true,\n            order: 3,\n        });\n        const idImage: InfoItem = this.infoItemRepository.create({\n            id: 10,\n            name: \"idImage\",\n            label: \"身份证图片\",\n            default: true,\n            description: \"用户身份证图片，正反面在同一页\",\n            type: \"uploadfile\",\n            necessary: true,\n            registerVisible: true,\n            informationVisible: true,\n            order: 4,\n        });\n        const cellPhoneNumber: InfoItem = this.infoItemRepository.create({\n            id: 11,\n            name: \"cellPhoneNumber\",\n            label: \"手机号\",\n            default: true,\n            description: \"用户手机号\",\n            type: \"text\",\n            necessary: true,\n            registerVisible: true,\n            informationVisible: true,\n            order: 5,\n        });\n        authentication.items = [ email, realName, idNumber, idImage, cellPhoneNumber ];\n        await this.infoGroupRepository.save(authentication);\n    }\n\n    /* 添加默认积分类型 */\n    async addDefaultScoreType() {\n        const scoreType1: ScoreType = this.scoreTypeRepository.create({\n            id: 1,\n            name: \"积分\",\n            type: \"int\",\n            default: true,\n            description: \"积分，用于......\",\n        });\n        const scoreType2: ScoreType = this.scoreTypeRepository.create({\n            id: 2,\n            name: \"贡献\",\n            type: \"int\",\n            default: true,\n            description: \"贡献，用于......\",\n        });\n        const scoreType3: ScoreType = this.scoreTypeRepository.create({\n            id: 3,\n            name: \"威望\",\n            type: \"int\",\n            default: true,\n            description: \"威望，用于......\",\n        });\n        const scoreType4: ScoreType = this.scoreTypeRepository.create({\n            id: 4,\n            name: \"余额\",\n            type: \"float\",\n            default: true,\n            description: \"余额，用于......\",\n        });\n        await this.scoreTypeRepository.save([ scoreType1, scoreType2, scoreType3, scoreType4 ]);\n    }\n}\n"]}