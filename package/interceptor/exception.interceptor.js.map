{"version":3,"sources":["interceptor/exception.interceptor.ts"],"names":[],"mappings":";;;;;;;;AAAA,2CAA+F;AAC/F,mCAAiC;AAIjC,IAAa,oBAAoB,GAAjC;IAEI,SAAS,CAAC,aAAa,EAAE,OAAyB,EAAE,OAAwB;QAExE,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,MAAM,EAAO,EAAE;YACtC,IAAI,GAAG,YAAY,sBAAa,EAAE;gBAC9B,OAAO,OAAO,CAAC,OAAO,CAAC;oBACnB,IAAI,EAAE,GAAG,CAAC,SAAS,EAAE;oBACrB,OAAO,EAAE,GAAG,CAAC,WAAW,EAAE;iBAC7B,CAAC,CAAC;aACN;iBAAM;gBACH,OAAO,OAAO,CAAC,OAAO,CAAC;oBACnB,IAAI,EAAE,GAAG;oBACT,OAAO,EAAE,SAAS,GAAG,GAAG,CAAC,QAAQ,EAAE;iBACtC,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACJ,CAAA;AAlBY,oBAAoB;IADhC,oBAAW,EAAE;GACD,oBAAoB,CAkBhC;AAlBY,oDAAoB","file":"exception.interceptor.js","sourcesContent":["import { ExecutionContext, HttpException, Interceptor, NestInterceptor } from \"@nestjs/common\";\nimport \"rxjs/add/operator/catch\";\nimport { Observable } from \"rxjs/Observable\";\n\n@Interceptor()\nexport class ExceptionInterceptor implements NestInterceptor {\n\n    intercept(dataOrRequest, context: ExecutionContext, stream$: Observable<any>): Observable<any> {\n\n        return stream$.catch((err, caught): any => {\n            if (err instanceof HttpException) {\n                return Promise.resolve({\n                    code: err.getStatus(),\n                    message: err.getResponse()\n                });\n            } else {\n                return Promise.resolve({\n                    code: 500,\n                    message: \"出现了意外错误\" + err.toString()\n                });\n            }\n        });\n    }\n}\n"]}