{"version":3,"sources":["util/float.util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAA4C;AAI5C,IAAa,SAAS,GAAtB;IAEU,GAAG,CAAC,CAAS,EAAE,CAAS;;YAE1B,IAAI,IAAY,EAAE,IAAY,CAAC;YAE/B,MAAM,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACrC,MAAM,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAErC,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;YAC3D,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;YAE3D,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE;gBAC1B,OAAO,CAAC,GAAG,CAAC,CAAC;aAChB;YACD,MAAM,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC;YAExB,IAAI,GAAG,GAAG,CAAC,EAAE;gBAET,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;gBAEjC,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;aAC9E;iBAEI;gBAED,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;gBAE5E,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;aACpC;YAED,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAE3D,MAAM,MAAM,GAAW,IAAI,GAAG,EAAE,CAAC;YAEjC,IAAI,iBAAiB,GAAG,CAAC,CAAC;YAE1B,IAAI,GAAG,GAAG,CAAC,EAAE;gBACT,iBAAiB,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;aAC5C;iBAAM;gBACH,iBAAiB,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;aAC5C;YAED,OAAO,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAChH,CAAC;KAAA;CAEJ,CAAA;AA9CY,SAAS;IADrB,mBAAU,EAAE;GACA,SAAS,CA8CrB;AA9CY,8BAAS","file":"float.util.js","sourcesContent":["import { Injectable } from \"@nestjs/common\";\n\n/* 异步操作文件的封装工具类 */\n@Injectable()\nexport class FloatUtil {\n    /*两个浮点数相加，返回浮点数 */\n    async add(a: number, b: number): Promise<number> {\n        /*声明转换后的整数字符串 */\n        let str1: string, str2: string;\n        /* 计算小数点位置 */\n        const index1 = (a + \"\").indexOf(\".\");\n        const index2 = (b + \"\").indexOf(\".\");\n        /* 计算小数点后位数 */\n        const num1 = index1 < 0 ? 0 : (a + \"\").length - index1 - 1;\n        const num2 = index2 < 0 ? 0 : (b + \"\").length - index2 - 1;\n        /* 整数 */\n        if (num1 === 0 && num2 === 0) {\n            return a + b;\n        }\n        const num = num1 - num2;\n        /*如果第一个浮点数小数点后位数大于第二个 */\n        if (num > 0) {\n            /*第一个浮点数直接去掉小数点 */\n            str1 = (a + \"\").replace(\".\", \"\");\n            /*第二个去掉小数点后，在后面补0 */\n            str2 = (b + \"\").replace(\".\", \"\").concat(new Array(num).fill(\"0\").join(\"\"));\n        }\n        /*如果第二个浮点数小数点后位数大于第一个 */\n        else {\n            /*第一个去掉小数点，后面补0 */\n            str1 = (a + \"\").replace(\".\", \"\").concat(new Array(-num).fill(\"0\").join(\"\"));\n            /*第二个直接去掉小数点 */\n            str2 = (b + \"\").replace(\".\", \"\");\n        }\n        /*计算整数相加结果，如果有负号在这一步也一样处理 */\n        const temp = Number.parseInt(str1) + Number.parseInt(str2);\n        /*整数结果字符串 */\n        const result: string = temp + \"\";\n        /*小数点应该插入的下标 */\n        let decimalPointIndex = 0;\n        /*如果第一个小数位数大于第二个 */\n        if (num > 0) {\n            decimalPointIndex = result.length - num1;\n        } else {\n            decimalPointIndex = result.length - num2;\n        }\n\n        return Number.parseFloat(result.substr(0, decimalPointIndex).concat(\".\", result.substr(decimalPointIndex)));\n    }\n\n}\n"]}