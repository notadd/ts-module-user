{"version":3,"sources":["util/http.util.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,qCAA2D;AAC3D,2CAA2D;AAG3D,IAAa,QAAQ,GAArB;IAEU,cAAc,CAAC,GAAW,EAAE,OAAoB;;YAClD,MAAM,MAAM,GAAQ,MAAM,IAAI,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;gBAC7C,aAAG,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC,GAAQ,EAAE,GAAa,EAAE,IAAS,EAAE,EAAE;oBACrD,IAAI,GAAG,EAAE;wBACL,EAAE,CAAC,GAAG,CAAC,CAAC;qBACX;yBAAM;wBACH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;wBAChC,IAAI,MAAM,CAAC,OAAO,EAAE;4BAChB,EAAE,CAAC,IAAI,sBAAa,CAAC,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;4BACjE,OAAO;yBACV;wBACD,EAAE,CAAC,MAAM,CAAC,CAAC;qBACd;oBACD,OAAO;gBACX,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAEK,IAAI,CAAC,GAAW,EAAE,OAAoB;;YACxC,MAAM,MAAM,GAAQ,MAAM,IAAI,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;gBAC7C,cAAI,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC,GAAQ,EAAE,GAAa,EAAE,IAAS,EAAE,EAAE;oBACtD,IAAI,GAAG,EAAE;wBACL,EAAE,CAAC,GAAG,CAAC,CAAC;qBACX;yBAAM;wBACH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;wBAChC,IAAI,MAAM,CAAC,KAAK,EAAE;4BACd,EAAE,CAAC,IAAI,sBAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;4BAC3C,OAAO;yBACV;wBACD,EAAE,CAAC,MAAM,CAAC,CAAC;qBACd;oBACD,OAAO;gBACX,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YACH,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;CACJ,CAAA;AAxCY,QAAQ;IADpB,mBAAU,EAAE;GACA,QAAQ,CAwCpB;AAxCY,4BAAQ","file":"http.util.js","sourcesContent":["import { get, post, CoreOptions, Response } from \"request\";\nimport { Injectable, HttpException } from \"@nestjs/common\";\n\n@Injectable()\nexport class HttpUtil {\n\n    async wechatOauthGet(uri: string, options: CoreOptions): Promise<any> {\n        const result: any = await new Promise((ok, no) => {\n            get(uri, options, (err: any, res: Response, body: any) => {\n                if (err) {\n                    no(err);\n                } else {\n                    const result = JSON.parse(body);\n                    if (result.errcode) {\n                        no(new HttpException(`${result.errcode}:${result.errmsg}`, 404));\n                        return;\n                    }\n                    ok(result);\n                }\n                return;\n            });\n        });\n\n        return result;\n    }\n\n    async post(uri: string, options: CoreOptions): Promise<any> {\n        const result: any = await new Promise((ok, no) => {\n            post(uri, options, (err: any, res: Response, body: any) => {\n                if (err) {\n                    no(err);\n                } else {\n                    const result = JSON.parse(body);\n                    if (result.error) {\n                        no(new HttpException(err.toString(), 404));\n                        return;\n                    }\n                    ok(result);\n                }\n                return;\n            });\n        });\n        return result;\n    }\n}\n"]}