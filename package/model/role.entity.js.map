{"version":3,"sources":["model/role.entity.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAAsH;AACtH,+CAAqC;AACrC,mDAAyC;AACzC,+CAAqC;AAOrC,IAAa,IAAI,GAAjB;CAsDC,CAAA;AAnDG;IADC,gCAAsB,EAAE;;gCACd;AAOX;IAJC,gBAAM,CAAC;QACJ,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,EAAE;KACb,CAAC;;kCACW;AAMb;IAHC,gBAAM,CAAC;QACJ,IAAI,EAAE,OAAO;KAChB,CAAC;;mCACY;AAWd;IARC,oBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,kBAAI,EAAE;QACtB,OAAO,EAAE,CAAC,QAAQ,CAAC;QACnB,IAAI,EAAE,KAAK;QACX,KAAK,EAAE,KAAK;KACf,CAAC;IACD,mBAAS,CAAC;QACP,IAAI,EAAE,WAAW;KACpB,CAAC;8BACK,KAAK;mCAAO;AAInB;IADC,gBAAM,EAAE;;yCACW;AAcpB;IAXC,mBAAS,CAAC,IAAI,CAAC,EAAE,CAAC,sBAAM,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE;QAC/C,OAAO,EAAE,CAAC,QAAQ,CAAC;QACnB,QAAQ,EAAE,UAAU;QACpB,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,KAAK;QACX,KAAK,EAAE,KAAK;KACf,CAAC;IACD,oBAAU,CAAC;QACR,IAAI,EAAE,aAAa;QACnB,oBAAoB,EAAE,OAAO;KAChC,CAAC;8BACM,sBAAM;oCAAC;AAQf;IALC,oBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,kBAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE;QAC1C,OAAO,EAAE,CAAC,QAAQ,CAAC;QACnB,IAAI,EAAE,KAAK;QACX,KAAK,EAAE,KAAK;KACf,CAAC;8BACK,KAAK;mCAAO;AArDV,IAAI;IAFhB,gBAAM,CAAC,MAAM,CAAC;IACd,eAAK,CAAC,wBAAwB,EAAE,CAAE,MAAM,EAAE,aAAa,CAAE,CAAC;GAC9C,IAAI,CAsDhB;AAtDY,oBAAI","file":"role.entity.js","sourcesContent":["import { Column, Entity, Index, JoinColumn, JoinTable, ManyToMany, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { Func } from \"./func.entity\";\nimport { Module } from \"./module.entity\";\nimport { User } from \"./user.entity\";\n\n/* 角色，一般由后台创建，一个角色包含多个功能，进而包含了功能下的权限，具有指定特定操作的权限\n   角色不能跨模块，所以它只能包含属于同一个模块下的功能，当删除模块时，其所属角色也会删除\n*/\n@Entity(\"role\")\n@Index(\"role_name_module_token\", [ \"name\", \"moduleToken\" ])\nexport class Role {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    /* 角色名称，同一个模块下不能重复 */\n    @Column({\n        name: \"name\",\n        length: 20\n    })\n    name: string;\n\n    /* 角色权限值，前端使用*/\n    @Column({\n        name: \"score\",\n    })\n    score: number;\n\n    /* 角色包含功能，只能包含同一个模块下功能，权限功能为多对多关系 */\n    @ManyToMany(type => Func, {\n        cascade: [\"insert\"],\n        lazy: false,\n        eager: false\n    })\n    @JoinTable({\n        name: \"role_func\"\n    })\n    funcs: Array<Func>;\n\n    /* 所属模块id */\n    @Column()\n    moduleToken: string;\n\n    /* 角色所属模块 */\n    @ManyToOne(type => Module, module => module.roles, {\n        cascade: [\"insert\"],\n        onDelete: \"RESTRICT\",\n        nullable: false,\n        lazy: false,\n        eager: false\n    })\n    @JoinColumn({\n        name: \"moduleToken\",\n        referencedColumnName: \"token\"\n    })\n    module: Module;\n\n    /* 拥有这个角色的用户，删除角色时，需要删除关联关系，因为用户并不会被删除 */\n    @ManyToMany(type => User, user => user.roles, {\n        cascade: [\"insert\"],\n        lazy: false,\n        eager: false\n    })\n    users: Array<User>;\n}\n"]}