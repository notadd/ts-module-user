{"version":3,"sources":["model/permission.entity.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,qCAA2G;AAC3G,mDAAyC;AACzC,+CAAqC;AAUrC,IAAa,UAAU,GAAvB;CAsDC,CAAA;AAnDG;IADC,gCAAsB,EAAE;;sCACd;AAOX;IAJC,gBAAM,CAAC;QACJ,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,EAAE;KACb,CAAC;;wCACW;AAOb;IAJC,gBAAM,CAAC;QACJ,IAAI,EAAE,aAAa;QACnB,MAAM,EAAE,KAAK;KAChB,CAAC;;+CACkB;AAQpB;IALC,oBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,kBAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE;QACzC,OAAO,EAAE,CAAC,QAAQ,CAAC;QACnB,IAAI,EAAE,KAAK;QACX,KAAK,EAAE,KAAK;KACf,CAAC;8BACQ,KAAK;4CAAO;AAQtB;IALC,oBAAU,CAAC,IAAI,CAAC,EAAE,CAAC,kBAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE;QAC5C,OAAO,EAAE,CAAC,QAAQ,CAAC;QACnB,IAAI,EAAE,KAAK;QACX,KAAK,EAAE,KAAK;KACf,CAAC;8BACW,KAAK;+CAAO;AAMzB;IAHC,gBAAM,CAAC;QACJ,MAAM,EAAE,GAAG;KACd,CAAC;;+CACkB;AAcpB;IAXC,mBAAS,CAAC,IAAI,CAAC,EAAE,CAAC,sBAAM,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,WAAW,EAAE;QACrD,OAAO,EAAE,CAAC,QAAQ,CAAC;QACnB,QAAQ,EAAE,UAAU;QACpB,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,KAAK;QACX,KAAK,EAAE,KAAK;KACf,CAAC;IACD,oBAAU,CAAC;QACR,IAAI,EAAE,aAAa;QACnB,oBAAoB,EAAE,OAAO;KAChC,CAAC;8BACM,sBAAM;0CAAC;AArDN,UAAU;IAFtB,gBAAM,CAAC,YAAY,CAAC;IACpB,eAAK,CAAC,mBAAmB,EAAE,CAAE,MAAM,EAAE,aAAa,CAAE,CAAC;GACzC,UAAU,CAsDtB;AAtDY,gCAAU","file":"permission.entity.js","sourcesContent":["import { Column, Entity, Index, JoinColumn, ManyToMany, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { Module } from \"./module.entity\";\nimport { User } from \"./user.entity\";\n\n/* 权限实体，代表了执行某种操作的权限，属于某个模块\n   目前所有权限由模块中使用装饰器提供，找到权限之后保存它\n   不能在后台添加权限，因为添加也没用，权限的使用是写死在代码里的\n   同一个模块下权限名不能重复，不同模块下可以重复\n   当删除模块时，所有权限也会删除\n*/\n@Entity(\"permission\")\n@Index(\"name_module_token\", [ \"name\", \"moduleToken\" ])\nexport class Permission {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    /* 权限名，不同模块下可以重复 */\n    @Column({\n        name: \"name\",\n        length: 50\n    })\n    name: string;\n\n    /* 权限描述 */\n    @Column({\n        name: \"description\",\n        length: \"100\"\n    })\n    description: string;\n\n    /*单独添加了权限的用户 */\n    @ManyToMany(type => User, user => user.adds, {\n        cascade: [\"insert\"],\n        lazy: false,\n        eager: false\n    })\n    addUsers: Array<User>;\n\n    /*单独减去了权限的用户 */\n    @ManyToMany(type => User, user => user.reduces, {\n        cascade: [\"insert\"],\n        lazy: false,\n        eager: false\n    })\n    reduceUsers: Array<User>;\n\n    /* 所属模块id */\n    @Column({\n        length: 100\n    })\n    moduleToken: string;\n\n    /* 所属模块 ，当模块删除之前需要单独删除权限，否则数据库外键检查会报错*/\n    @ManyToOne(type => Module, module => module.permissions, {\n        cascade: [\"insert\"],\n        onDelete: \"RESTRICT\",\n        nullable: false,\n        lazy: false,\n        eager: false\n    })\n    @JoinColumn({\n        name: \"moduleToken\",\n        referencedColumnName: \"token\"\n    })\n    module: Module;\n}\n"]}