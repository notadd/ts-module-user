{"version":3,"sources":["guard/permission.guard.ts"],"names":[],"mappings":"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","file":"permission.guard.js","sourcesContent":["import { PERMISSION_CONTROLLER_AND, PERMISSION_CONTROLLER_OR } from \"../decorator/can.decorator\";\nimport { CanActivate, Injectable, Inject } from \"@nestjs/common\";\nimport { ExecutionContextHost } from \"@nestjs/core/helpers/execution-context.host\";\nimport { UserComponent } from \"../export/user.component.provider\";\nimport { Permission } from \"../model/permission.entity\";\nimport { User } from \"../model/user.entity\";\n\nexport const MODULE_TOKEN = \"module_token\";\n\n@Injectable()\nexport class PermissionGuard implements CanActivate {\n\n    constructor(\n        @Inject(\"UserComponentToken\") private readonly userComponent: UserComponent\n    ) {\n    }\n\n    /* 对类、方法上的控制权限进行判断，用来判断请求是否可以通过\n       如果类、方法上都有控制权限，必须分别通过，才可通过，也就是and关系\n       在类或者方法上，必须通过所有and权限，且通过or权限之一才可通过，也就是顶层关系为and\n       classAnd1&&classAnd2&&(classOr1||classOr2) && method_and1&&method_and2&&(method_or1||method2)\n    */\n    async canActivate(context: ExecutionContextHost): Promise<boolean> {\n        const parent = context.getClass();\n        const handler = context.getHandler();\n        const user: User = context.switchToHttp().getRequest().user as User;\n        // 获取用户此时拥有的权限，已经根据角色、增权限、减权限计算出了最终拥有的权限\n        let permissions: Array<Permission>;\n        // 用户存在\n        if (user) {\n            // 获取用户具有的权限\n            permissions = await this.userComponent.permissions(user.id);\n            // 回收站用户不能访问任何接口\n            if (user.recycle) {\n                return false;\n            }\n            // 封禁用户不具有任何权限\n            if (!user.status) {\n                permissions = [];\n            }\n        } else {\n            // 用户不存在，权限为空\n            permissions = [];\n        }\n\n        // 获取类上定义权限\n        const classOr: Array<string> = Reflect.getMetadata(PERMISSION_CONTROLLER_OR, parent) || [];\n        const classAnd: Array<string> = Reflect.getMetadata(PERMISSION_CONTROLLER_AND, parent) || [];\n        // 在onModuleInit方法中设置，模块名称，用来判断权限属于哪个模块\n        const token = Reflect.getMetadata(MODULE_TOKEN, parent);\n        // 检查类上控制权限\n        const classPass = this.checkPermission(permissions, classAnd, classOr, token);\n        if (!classPass) { return false; }\n        // 获取方法上定义权限\n        const methodOr: Array<string> = Reflect.getMetadata(PERMISSION_CONTROLLER_OR, handler) || [];\n        const methodAnd: Array<string> = Reflect.getMetadata(PERMISSION_CONTROLLER_AND, handler) || [];\n        // 检查方法上控制权限\n        const methodPass = this.checkPermission(permissions, methodAnd, methodOr, token);\n        return methodPass;\n    }\n\n    /*  对拥有的权限进行检查，返回是否通过,类检查一次，方法检查一次*/\n    checkPermission(permissions: Array<Permission>, and: Array<string>, or: Array<string>, token: string): boolean {\n        // 遍历类上and权限，如果不存在，则不进入循环\n        for (let i = 0; i < and.length; i++) {\n            const name = and[i];\n            // 在用户拥有权限中查找\n            const find = permissions.find(per => {\n                // 必须名称、token都相同才可以，因为不同模块下权限名可以相同\n                return per.name === name && per.moduleToken === token;\n            });\n            // 如果没找到，说明一个and权限未通过\n            if (!find) {\n                return false;\n            }\n        }\n        // 遍历类上or权限，如果有一个通过即通过，如果不存在不进入循环\n        for (let i = 0; i < or.length; i++) {\n            const name = or[i];\n            // 在用户拥有权限中查找\n            const find = permissions.find(per => {\n                // 必须名称、token都相同才可以，因为不同模块下权限名可以相同\n                return per.name === name && per.moduleToken === token;\n            });\n            // 如果找到，说明一个or权限通过,退出循环\n            if (find) {\n                break;\n            }\n            // 如果未找到，继续找，如果已经是最后一个or权限还未找到，则返回false\n            if (i === or.length - 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"]}