{"version":3,"sources":["resolver/role.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAwE;AACxE,6CAAqD;AACrD,+BAAuC;AACvC,gFAA4E;AAG5E,0DAAsD;AAKtD,IAAa,YAAY,GAAzB;IAEI,YAC0C,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAElE,CAAC;IAGK,UAAU,CAAC,GAAoB,EAAE,IAA0D;;YAC7F,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;YAC1C,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;gBACjC,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAC5D,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;IAGK,UAAU,CAAC,GAAoB,EAAE,IAAiD;;YACpF,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;YACjC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;gBACxB,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YACnD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;IAGK,UAAU,CAAC,GAAoB,EAAE,IAAoB;;YACvD,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YACtC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;IAGK,QAAQ,CAAC,GAAoB,EAAE,IAA4C;;YAC7E,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;YAC7B,IAAI,CAAC,EAAE,EAAE;gBACL,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAC7C,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;QAC9C,CAAC;KAAA;CACJ,CAAA;AAtCG;IADC,kBAAQ,CAAC,YAAY,CAAC;;qCACD,sBAAe;;8CAOpC;AAGD;IADC,kBAAQ,CAAC,YAAY,CAAC;;qCACD,sBAAe;;8CAOpC;AAGD;IADC,kBAAQ,CAAC,YAAY,CAAC;;qCACD,sBAAe;;8CAOpC;AAGD;IADC,kBAAQ,CAAC,UAAU,CAAC;;qCACD,sBAAe;;4CAOlC;AA7CQ,YAAY;IAFxB,kBAAQ,CAAC,MAAM,CAAC;IAChB,wBAAe,CAAC,4CAAoB,CAAC;IAI7B,WAAA,eAAM,CAAC,0BAAW,CAAC,CAAA;qCAA+B,0BAAW;GAHzD,YAAY,CA8CxB;AA9CY,oCAAY","file":"role.resolver.js","sourcesContent":["import { HttpException, Inject, UseInterceptors } from \"@nestjs/common\";\nimport { Mutation, Resolver } from \"@nestjs/graphql\";\nimport { IncomingMessage } from \"http\";\nimport { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Data } from \"../interface/data\";\nimport { Role } from \"../model/role.entity\";\nimport { RoleService } from \"../service/role.service\";\n\n/* 角色是功能的集合，因为功能属于模块，则角色也属于某个模块，随着模块删除而删除 */\n@Resolver(\"Role\")\n@UseInterceptors(ExceptionInterceptor)\nexport class RoleResolver {\n\n    constructor(\n        @Inject(RoleService) private readonly roleService: RoleService\n    ) {\n    }\n\n    @Mutation(\"createRole\")\n    async createRole(req: IncomingMessage, body: { moduleToken: string, name: string, score: number }): Promise<Data> {\n        const { moduleToken, name, score } = body;\n        if (!moduleToken || !name || !score) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.roleService.createRole(moduleToken, name, score);\n        return { code: 200, message: \"创建角色成功\" };\n    }\n\n    @Mutation(\"updateRole\")\n    async updateRole(req: IncomingMessage, body: { id: number, name: string, score: number }): Promise<Data> {\n        const { id, name, score } = body;\n        if (!id || !name || !score) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.roleService.updateRole(id, name, score);\n        return { code: 200, message: \"更新角色成功\" };\n    }\n\n    @Mutation(\"deleteRole\")\n    async deleteRole(req: IncomingMessage, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.roleService.deleteRole(id);\n        return { code: 200, message: \"删除角色成功\" };\n    }\n\n    @Mutation(\"setFuncs\")\n    async setFuncs(req: IncomingMessage, body: { id: number, funcIds: Array<number> }): Promise<Data> {\n        const { id, funcIds } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.roleService.setFuncs(id, funcIds);\n        return { code: 200, message: \"设置角色功能成功\" };\n    }\n}\n"]}