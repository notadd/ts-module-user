{"version":3,"sources":["resolver/info.item.resolver.ts"],"names":[],"mappings":"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","file":"info.item.resolver.js","sourcesContent":["import { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { HttpException, Inject, UseInterceptors } from \"@nestjs/common\";\nimport { InfoItemService } from \"../service/info.item.service\";\nimport { Mutation, Resolver } from \"@nestjs/graphql\";\nimport { Data } from \"../interface/data\";\nimport { Request } from \"express\";\n\n/* 这个几个接口只是写在这，使用上还有很多问题,因为信息项可能不会编辑，所以不一定有用 */\n@Resolver(\"InfoItem\")\n@UseInterceptors(ExceptionInterceptor)\nexport class InfoItemResolver {\n\n    constructor(\n        @Inject(InfoItemService) private readonly infoItemService: InfoItemService\n    ) { }\n\n    @Mutation(\"createInfoItem\")\n    async createInfoItem(req: Request, body: { name: string, label: string, description: string, type: string, necessary: boolean, registerVisible: boolean, informationVisible: boolean, order: number }): Promise<Data> {\n        const { name, label, description, type, necessary, registerVisible, informationVisible, order } = body;\n        if (!name || !label || !type || necessary === undefined || necessary === null) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.infoItemService.createInfoItem(name, label, description, type, necessary, registerVisible, informationVisible, order);\n        return { code: 200, message: \"创建信息项成功\" };\n    }\n\n    @Mutation(\"updateInfoItem\")\n    async updateInfoItem(req: Request, body: { id: number, name: string, label: string, description: string, type: string, necessary: boolean, registerVisible: boolean, informationVisible: boolean, order: number }): Promise<Data> {\n        const { id, name, label, description, type, necessary, registerVisible, informationVisible, order } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.infoItemService.updateInfoItem(id, name, label, description, type, necessary, registerVisible, informationVisible, order);\n        return { code: 200, message: \"更新信息项成功\" };\n    }\n\n    @Mutation(\"deleteInfoItem\")\n    async deleteInfoItem(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.infoItemService.deleteInfoItem(id);\n        return { code: 200, message: \"删除信息项成功\" };\n    }\n\n    @Mutation(\"deleteInfoItems\")\n    async deleteInfoItems(req: Request, body: { ids: Array<number> }): Promise<Data> {\n        const { ids } = body;\n        if (!ids || ids.length === 0) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.infoItemService.deleteInfoItems(ids);\n        return { code: 200, message: \"删除多个信息项成功\" };\n    }\n\n}\n"]}