{"version":3,"sources":["resolver/organization.resolver.ts"],"names":[],"mappings":"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","file":"organization.resolver.js","sourcesContent":["import { HttpException, Inject, UseInterceptors } from \"@nestjs/common\";\nimport { Mutation, Query, Resolver } from \"@nestjs/graphql\";\nimport { IncomingMessage } from \"http\";\nimport { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Data } from \"../interface/data\";\nimport { ChildrenData } from \"../interface/organization/children.data\";\nimport { OrganizationsData } from \"../interface/organization/organizations.data\";\nimport { RootsData } from \"../interface/organization/roots.data\";\nimport { UsersInOrganizationData } from \"../interface/organization/users.in.organization.data\";\nimport { OrganizationService } from \"../service/organization.service\";\n\n@Resolver(\"Organization\")\n@UseInterceptors(ExceptionInterceptor)\nexport class OrganizationResolver {\n\n    constructor(\n        @Inject(OrganizationService) private readonly organizationService: OrganizationService\n    ) {\n    }\n\n    /* 查找所有根组织 */\n    @Query(\"roots\")\n    async roots(): Promise<RootsData> {\n        const roots = await this.organizationService.getRoots();\n        return { code: 200, message: \"获取所有根组织成功\", roots };\n    }\n\n    /* 查找指定组织的所有子组织 */\n    @Query(\"children\")\n    async children(req: IncomingMessage, body: { id: number }): Promise<ChildrenData> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const children = await this.organizationService.getChildren(id);\n        return { code: 200, message: \"获取子组织成功\", children };\n    }\n\n    /* 查找所有现存组织 */\n    @Query(\"organizations\")\n    async organizations(): Promise<OrganizationsData> {\n        const organizations = await this.organizationService.getAll();\n        return { code: 200, message: \"获取所有组织成功\", organizations: [] };\n    }\n\n    /* 创建指定名称组织，可选是否指定父组织id */\n    @Mutation(\"createOrganization\")\n    async createOrganization(req: IncomingMessage, body: { name: string, parentId: number }): Promise<Data> {\n        const { name, parentId } = body;\n        if (!name) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        if (parentId && !Number.isInteger(parentId)) {\n            throw new HttpException(\"父组织Id不是整数\", 401);\n        }\n        await this.organizationService.createOrganization(name, parentId);\n        return { code: 200, message: \"创建组织成功\" };\n    }\n\n    /* 更新指定id组织，可更新组织名、父组织 */\n    @Mutation(\"updateOrganization\")\n    async updateOrganization(req: IncomingMessage, body: { id: number, name: string, parentId: number }): Promise<Data> {\n        const { id, name, parentId } = body;\n        if (!id || !name) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        if (parentId && !Number.isInteger(parentId)) {\n            throw new HttpException(\"父组织Id不是整数\", 401);\n        }\n        await this.organizationService.updateOrganization(id, name, parentId);\n        return { code: 200, message: \"更新组织成功\" };\n    }\n\n    /* 删除指定id组织，默认情况下有子组织会报错，不能删除\n       可以指定force=true，强制删除组织及其子孙组织\n    */\n    @Mutation(\"deleteOrganization\")\n    async deleteOrganization(req: IncomingMessage, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.organizationService.deleteOrganization(id);\n        return { code: 200, message: \"删除组织成功\" };\n    }\n\n    /* 查找指定组织下所有用户 */\n    @Query(\"usersInOrganization\")\n    async usersInOrganization(req: IncomingMessage, body: { id: number }): Promise<UsersInOrganizationData> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const users = await this.organizationService.getUsersInOrganization(id);\n        return { code: 200, message: \"获取组织用户成功\", users };\n    }\n\n    /* 向指定组织添加一个指定用户 */\n    @Mutation(\"addUserToOrganization\")\n    async addUserToOrganization(req: IncomingMessage, body: { id: number, userId: number }): Promise<Data> {\n        const { id, userId } = body;\n        if (!id || !userId) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.organizationService.addUserToOrganization(id, userId);\n        return { code: 200, message: \"向组织添加用户成功\", };\n    }\n\n    /* 向指定组织添加多个指定用户 */\n    @Mutation(\"addUsersToOrganization\")\n    async addUsersToOrganization(req: IncomingMessage, body: { id: number, userIds: Array<number> }): Promise<Data> {\n        const { id, userIds } = body;\n        if (!id || !userIds || userIds.length === 0) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.organizationService.addUsersToOrganization(id, userIds);\n        return { code: 200, message: \"向组织添加多个用户成功\" };\n    }\n\n    /* 将指定用户从组织中移除 */\n    @Mutation(\"removeUserFromOrganization\")\n    async removeUserFromOrganization(req: IncomingMessage, body: { id: number, userId: number }): Promise<Data> {\n        const { id, userId } = body;\n        if (!id || !userId) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.organizationService.removeUserFromOrganization(id, userId);\n        return { code: 200, message: \"从组织移除用户成功\" };\n    }\n\n    /* 将指定多个用户从组织中移除 */\n    @Mutation(\"removeUsersFromOrganization\")\n    async removeUsersFromOrganization(req: IncomingMessage, body: { id: number, userIds: Array<number> }): Promise<Data> {\n        const { id, userIds } = body;\n        if (!id || !userIds || userIds.length === 0) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.organizationService.removeUsersFromOrganization(id, userIds);\n        return { code: 200, message: \"从组织移除多个用户成功\" };\n    }\n\n}\n"]}