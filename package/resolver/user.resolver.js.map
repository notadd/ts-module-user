{"version":3,"sources":["resolver/user.resolver.ts"],"names":[],"mappings":"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","file":"user.resolver.js","sourcesContent":["import { HttpException, Inject, UseInterceptors } from \"@nestjs/common\";\nimport { Mutation, Query, Resolver } from \"@nestjs/graphql\";\nimport { IncomingMessage } from \"http\";\nimport { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Data } from \"../interface/data\";\nimport { CreateUserBody } from \"../interface/user/create.user.body\";\nimport { FreedomUsersData } from \"../interface/user/freedom.users.data\";\nimport { PermissionsData } from \"../interface/user/permissions.data\";\nimport { RecycleUsersData } from \"../interface/user/recycle.users.data\";\nimport { RolesData } from \"../interface/user/roles.data\";\nimport { UnionUserInfo } from \"../interface/user/union.user.info\";\nimport { UpdateUserBody } from \"../interface/user/update.user.body\";\nimport { UserInfosData } from \"../interface/user/user.infos.data\";\nimport { UsersData } from \"../interface/user/users.data\";\nimport { UserService } from \"../service/user.service\";\n\n@Resolver(\"User\")\n@UseInterceptors(ExceptionInterceptor)\nexport class UserResolver {\n\n    constructor(\n        @Inject(UserService) private readonly userService: UserService\n    ) {\n    }\n\n    /* 获取当前所有用户 */\n    @Query(\"users\")\n    async users(): Promise<UsersData> {\n        const users = await this.userService.getAll();\n        return { code: 200, message: \"获取所有用户成功\", users };\n    }\n\n    /* 获取当前所有自由用户，即不属于任何组织的用户 */\n    @Query(\"freedomUsers\")\n    async freedomUsers(): Promise<FreedomUsersData> {\n        const freedomUsers = await this.userService.getFreedomUsers();\n        return { code: 200, message: \"获取所有自由用户成功\", freedomUsers };\n    }\n\n    /* 获取当前所有回收站用户，即被软删除的用户 */\n    @Query(\"recycleUsers\")\n    async recycleUsers(): Promise<RecycleUsersData> {\n        const recycleUsers = await this.userService.getRecycleUsers();\n        return { code: 200, message: \"获取所有回收站用户成功\", recycleUsers };\n    }\n\n    @Query(\"userInfos\")\n    async userInfos(req: IncomingMessage, body: { id: number }): Promise<UserInfosData> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const userInfos = await this.userService.userInfos(id);\n        return { code: 200, message: \"获取指定用户信息成功\", userInfos };\n    }\n\n    @Query(\"rolesInUser\")\n    async rolesInUser(req: IncomingMessage, body: { id: number }): Promise<RolesData> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const roles = await this.userService.roles(id);\n        return { code: 200, message: \"获取指定用户角色成功\", roles };\n    }\n\n    @Query(\"permissionsInUser\")\n    async permissionsInUser(req: IncomingMessage, body: { id: number }): Promise<PermissionsData> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const permissions = await this.userService.permissions(id);\n        return { code: 200, message: \"获取指定用户角色成功\", permissions };\n    }\n\n    /* 后台创建用户接口，只包含通用信息项，不包含特殊信息项\n       模块创建用户不使用这个接口，因为模块创建用户需要添加特殊信息项\n    */\n    @Mutation(\"createUser\")\n    async createUser(req: IncomingMessage, body: CreateUserBody): Promise<Data> {\n        const { organizationId, userName, password } = body;\n        if (!userName || !password) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.createUser(organizationId, userName, password);\n        return { code: 200, message: \"创建用户成功\" };\n    }\n\n    /* 模块创建用户接口，会传递用户基本信息，与这个模块调用的信息组的信息，不同类型信息组处理方式不同\n       传递信息的方式为groups对象数组，每个对象包含了信息组id，以及信息数组，信息组id用来验证信息是否正确\n    */\n    @Mutation(\"createUserWithUserInfo\")\n    async createUserWithUserInfo(req: IncomingMessage, body: CreateUserBody & { groups: Array<{ groupId: number, infos: Array<UnionUserInfo> }> }): Promise<Data> {\n        const { organizationId, userName, password, groups } = body;\n        if (!userName || !password) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.createUserWithUserInfo(req, organizationId, userName, password, groups);\n        return { code: 200, message: \"创建用户成功\" };\n    }\n\n    @Mutation(\"addUserInfo\")\n    async addUserInfo(req: IncomingMessage, body: { id: number, groups: Array<{ groupId: number, infos: Array<UnionUserInfo> }> }): Promise<Data> {\n        const { id, groups } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.addUserInfoToUser(req, id, groups);\n        return { code: 200, message: \"创建用户成功\" };\n    }\n\n    @Mutation(\"updateUser\")\n    async updateUser(req: IncomingMessage, body: UpdateUserBody): Promise<Data> {\n        const { id, userName, password } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.updateUser(id, userName, password);\n        return { code: 200, message: \"更新用户成功\" };\n    }\n\n    @Mutation(\"bannedUser\")\n    async bannedUser(req: IncomingMessage, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.bannedUser(id);\n        return { code: 200, message: \"封禁用户成功\" };\n    }\n\n    @Mutation(\"unBannedUser\")\n    async unBannedUser(req: IncomingMessage, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.unBannedUser(id);\n        return { code: 200, message: \"解封用户成功\" };\n    }\n\n    /* 软删除指定用户，即将其加入回收站 */\n    @Mutation(\"softDeleteUser\")\n    async softDeleteUser(req: IncomingMessage, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.softDeleteUser(id);\n        return { code: 200, message: \"删除用户到回收站成功\" };\n    }\n\n    /* 将指定用户从回收站还原 */\n    @Mutation(\"restoreUser\")\n    async restoreUser(req: IncomingMessage, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.restoreUser(id);\n        return { code: 200, message: \"还原用户成功\" };\n    }\n\n    /* 将指定多个用户从回收站还原 */\n    @Mutation(\"restoreUsers\")\n    async restoreUsers(req: IncomingMessage, body: { ids: Array<number> }): Promise<Data> {\n        const { ids } = body;\n        if (!ids || ids.length === 0) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.restoreUsers(ids);\n        return { code: 200, message: \"还原多个用户成功\" };\n    }\n\n    @Mutation(\"deleteUser\")\n    async deleteUser(req: IncomingMessage, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.deleteUser(id);\n        return { code: 200, message: \"删除用户成功\" };\n    }\n\n    @Mutation(\"deleteUsers\")\n    async deleteUsers(req: IncomingMessage, body: { ids: Array<number> }): Promise<Data> {\n        const { ids } = body;\n        if (!ids || ids.length === 0) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.deleteUsers(ids);\n        return { code: 200, message: \"删除用户成功\" };\n    }\n\n    /* 设置用户角色，设置的角色就是用户以后拥有的所有角色 */\n    @Mutation(\"setRoles\")\n    async setRoles(req: IncomingMessage, body: { id: number, roleIds: Array<number> }): Promise<Data> {\n        const { id, roleIds } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.setRoles(id, roleIds);\n        return { code: 200, message: \"设置用户角色成功\" };\n    }\n\n    /* 设置用户权限，设置的权限是最终结果，也就是说按照role、adds、reduces等生成的最终结果，由后端来进行差分运算，计算adds、reduces */\n    @Mutation(\"setUserOwnPermissions\")\n    async setUserOwnPermissions(req: IncomingMessage, body: { id: number, permissionIds: Array<number> }): Promise<Data> {\n        const { id, permissionIds } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.userService.setPermissions(id, permissionIds);\n        return { code: 200, message: \"设置用户权限成功\" };\n    }\n\n}\n"]}