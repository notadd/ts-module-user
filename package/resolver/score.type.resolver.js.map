{"version":3,"sources":["resolver/score.type.resolver.ts"],"names":[],"mappings":"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","file":"score.type.resolver.js","sourcesContent":["import { HttpException, Inject, UseInterceptors } from \"@nestjs/common\";\nimport { Mutation, Query, Resolver } from \"@nestjs/graphql\";\nimport { Request } from \"express\";\nimport { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Data } from \"../interface/data\";\nimport { ScoreTypesData } from \"../interface/scoreType/score.types.data\";\nimport { ScoreTypeService } from \"../service/score.type.service\";\n\n@Resolver(\"ScoreType\")\n@UseInterceptors(ExceptionInterceptor)\nexport class ScoreTypeResolver {\n\n    constructor(\n        @Inject(ScoreTypeService) private readonly scoreTypeService: ScoreTypeService\n    ) {\n    }\n\n    @Query(\"scoreTypes\")\n    async scoreTypes(): Promise<ScoreTypesData> {\n        const scoreTypes = await this.scoreTypeService.getAll();\n        return { code: 200, message: \"获取所有积分类型成功\", scoreTypes };\n    }\n\n    @Mutation(\"createScoreType\")\n    async createScoreType(req: Request, body: { name: string, type: string, description: string }): Promise<Data> {\n        const { name, type, description } = body;\n        if (!name || !type) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        if (type !== \"float\" && type !== \"int\") {\n            throw new HttpException(\"参数错误\", 400);\n        }\n        await this.scoreTypeService.createScoreType(name, type, description);\n        return { code: 200, message: \"创建积分类型成功\" };\n    }\n\n    @Mutation(\"updateScoreType\")\n    async updateScoreType(req: Request, body: { id: number, name: string, type: string, description: string }): Promise<Data> {\n        const { id, name, type, description } = body;\n        if (!id || !name || !type) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        if (type !== \"float\" && type !== \"int\") {\n            throw new HttpException(\"参数错误\", 400);\n        }\n        await this.scoreTypeService.updateScoreType(id, name, type, description);\n        return { code: 200, message: \"更新积分类型成功\" };\n    }\n\n    /* 删除积分类型时，相关积分会被一起删除 */\n    @Mutation(\"deleteScoreType\")\n    async deleteScoreType(req: Request, body: { id: number }): Promise<Data> {\n        const { id } = body;\n        if (!id) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.scoreTypeService.deleteScoreType(id);\n        return { code: 200, message: \"删除积分类型成功\" };\n    }\n\n    /* 批量删除积分类型，删除积分类型时，相关积分会被一起删除 */\n    @Mutation(\"deleteScoreTypes\")\n    async deleteScoreTypes(req: Request, body: { ids: Array<number> }): Promise<Data> {\n        const { ids } = body;\n        if (!ids || ids.length === 0) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.scoreTypeService.deleteScoreTypes(ids);\n        return { code: 200, message: \"批量删除积分类型成功\" };\n    }\n\n}\n"]}