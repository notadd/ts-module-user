{"version":3,"sources":["resolver/score.resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAwE;AACxE,6CAA4D;AAC5D,+BAAuC;AACvC,gFAA4E;AAE5E,4DAAwD;AAIxD,IAAa,aAAa,GAA1B;IAEI,YAC2C,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAErE,CAAC;IAGK,QAAQ,CAAC,GAAoB,EAAE,IAA6C;;YAC9E,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;YACrC,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE;gBACzB,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YACpE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;QACnD,CAAC;KAAA;IAGK,QAAQ,CAAC,GAAoB,EAAE,IAA0D;;YAC3F,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YAC1C,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE;gBACzB,MAAM,IAAI,sBAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;YAC3D,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QAC5C,CAAC;KAAA;CAEJ,CAAA;AAnBG;IADC,eAAK,CAAC,UAAU,CAAC;;qCACE,sBAAe;;6CAOlC;AAGD;IADC,kBAAQ,CAAC,UAAU,CAAC;;qCACD,sBAAe;;6CAOlC;AAzBQ,aAAa;IAFzB,kBAAQ,CAAC,OAAO,CAAC;IACjB,wBAAe,CAAC,4CAAoB,CAAC;IAI7B,WAAA,eAAM,CAAC,4BAAY,CAAC,CAAA;qCAAgC,4BAAY;GAH5D,aAAa,CA2BzB;AA3BY,sCAAa","file":"score.resolver.js","sourcesContent":["import { HttpException, Inject, UseInterceptors } from \"@nestjs/common\";\nimport { Mutation, Query, Resolver } from \"@nestjs/graphql\";\nimport { IncomingMessage } from \"http\";\nimport { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Data } from \"../interface/data\";\nimport { ScoreService } from \"../service/score.service\";\n\n@Resolver(\"Score\")\n@UseInterceptors(ExceptionInterceptor)\nexport class ScoreResolver {\n\n    constructor(\n        @Inject(ScoreService) private readonly scoreService: ScoreService\n    ) {\n    }\n\n    @Query(\"getScore\")\n    async getScore(req: IncomingMessage, body: { userId: number, scoreTypeId: number }): Promise<Data & { score: number }> {\n        const { userId, scoreTypeId } = body;\n        if (!userId || !scoreTypeId) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const score = await this.scoreService.getScore(userId, scoreTypeId);\n        return { code: 200, message: \"获取积分成功\", score };\n    }\n\n    @Mutation(\"setScore\")\n    async setScore(req: IncomingMessage, body: { userId: number, scoreTypeId: number, add: number }): Promise<Data> {\n        const { userId, scoreTypeId, add } = body;\n        if (!userId || !scoreTypeId) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.scoreService.setScore(userId, scoreTypeId, add);\n        return { code: 200, message: \"设置积分成功\" };\n    }\n\n}\n"]}