<<<<<<< HEAD
{"version":3,"sources":["interface/user.info.manager.ts"],"names":[],"mappings":"","file":"user.info.manager.js","sourcesContent":["import { EntityManager } from \"typeorm\";\n\n/*\n用户信息管理器组件接口类型，目前只有获取用户信息、删除用户信息两个方法\n当用户中心获取用户信息、删除用户时调用这两个方法\n由于删除是事务操作，需要传递事务实体管理器\n至于更新操作，还不确定\n*/\nexport interface UserInfoManager {\n    getUserInfo(userId: number): Promise<ModuleUserInfo>;\n    deleteUserInfo(manager: EntityManager, userId: number): Promise<void>;\n}\n\n/*\n用户中心获取用户信息时，其他模块的返回值类型\n指明了模块token，以及一个信息Map，信息实体类为key，信息对象为value\n*/\nexport interface ModuleUserInfo {\n    moduleToken: string;\n    userInfos: Map<Function, any>;\n}"]}
=======
{"version":3,"sources":["interface/user.info.manager.ts"],"names":[],"mappings":"","file":"user.info.manager.js","sourcesContent":["import { EntityManager } from \"typeorm\";\n\n/*\n用户信息管理器组件接口类型，目前只有获取用户信息、删除用户信息两个方法\n当用户中心获取用户信息、删除用户时调用这两个方法\n由于删除是事务操作，需要传递事务实体管理器\n至于更新操作，还不确定\n*/\nexport interface UserInfoManager {\n    getUserInfo(userId: number): Promise<ModuleUserInfo>;\n    deleteUserInfo(manager: EntityManager, userId: number): Promise<void>;\n}\n\n/*\n用户中心获取用户信息时，其他模块的返回值类型\n指明了模块token，以及一个信息Map，信息实体类为key，信息对象为value\n*/\nexport interface ModuleUserInfo {\n    moduleToken: string;\n    userInfos: Map<Function, any>;\n}\n"]}
>>>>>>> 315074f98475a6eca97570ab841d650d13b9bb3a
