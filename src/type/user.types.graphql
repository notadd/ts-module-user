type Query{
    #get all of user 
    users:UsersData
    #get all of freedom users
    freedomUsers:FreedomUsersData
}


type Mutation{
    #create user , specify organization
    createUser(
        organizationId: Int, 
        userName: String!, 
        password: String!, 
        nickname: String!, 
        realName: String!, 
        sex: Sex!, 
        birthday: String!, 
        email: String!, 
        cellPhoneNumber: String!, 
        status: Boolean! 
    ):Data
    #create user with UserInfo, specify organization
    createUserWithUserInfo(
        organizationId: Int, 
        userName: String!, 
        password: String!, 
        nickname: String!, 
        realName: String!, 
        sex: Sex!, 
        birthday: String!, 
        email: String!, 
        cellPhoneNumber: String!, 
        status: Boolean!,
        groups: [UserInfoGroup]
    ):Data
    #add userinfo to user , user must exist
    addUserInfoToUser(
        id:Int!,
        groups: [UserInfoGroup]
    ):Data
}

enum Sex{
    men 
    women
}

#users return Data
type UsersData{
    #error code
    code:Int
    #error message
    message:String
    #array of user
    users:[User]
}

#freeUsers return Data
type FreedomUsersData{
    #error code
    code:Int
    #error message
    message:String
    #array of user
    freedomUsers:[User]
}

#input user info group
input UserInfoGroup{
    #id of InfoGroup
    id:Int
    #array of union info type
    infos:[UnionUserInfo]
}

#userinfo union type , name is required 
#when text ,value is required
#when checkbox , array is required
#when file , base64、rawName、bucketName is required
input  UnionUserInfo{
    name:String!
    value:String
    array:[String]
    base64:String
    rawName:String
    bucketName:String
}
