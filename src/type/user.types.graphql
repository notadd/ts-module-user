type Query{
    #get all of user 
    users:UsersData
    #get all of freedom users
    freedomUsers:FreedomUsersData
}


type Mutation{
    #create user , specify organization
    createUser(
        organizationId: Int, 
        userName: String, 
        password: String, 
        nickname: String, 
        realName: String, 
        sex: Sex, 
        birthday: String, 
        email: String, 
        cellPhoneNumber: String, 
        status: Boolean 
    ):Data
    #create user with UserInfo, specify organization
    createUserWithUserInfo(
        organizationId: Int, 
        userName: String, 
        password: String, 
        nickname: String, 
        realName: String, 
        sex: Sex, 
        birthday: String, 
        email: String, 
        cellPhoneNumber: String, 
        status: Boolean,
        groups: [UserInfoGroup]
    ):Data
}

enum Sex{
    men 
    women
}

#users return Data
type UsersData{
    #error code
    code:Int
    #error message
    message:String
    #array of user
    users:[User]
}

#freeUsers return Data
type FreedomUsersData{
    #error code
    code:Int
    #error message
    message:String
    #array of user
    freedomUsers:[User]
}

#input user info group
input UserInfoGroup{
    #id of InfoGroup
    id:Int
    #array of union info type
    infos:[SingleRowText | MultiRowText | Radio | CheckBox | Date | PulldownMenu | File]
}

#single row text info
type SingleRowText{
    name: String
    value: String
}

#multi row info
type MultiRowText{
    name: String
    value: String
}

#radio
type Radio{
    name: String
    value: String
}

#check
type CheckBox{
    name: String
    value: [String]
}

#date
type Date{
    name: String
    value: String
}

#pulldown menu,return single value
type PulldownMenu{
    name: String
    value: String
}

#image or file 
type File{
    name: String
    value: String
    #raw name of file
    rawName: String
}